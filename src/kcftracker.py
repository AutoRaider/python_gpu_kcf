# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_kcftracker', [dirname(__file__)])
        except ImportError:
            import _kcftracker
            return _kcftracker
        if fp is not None:
            try:
                _mod = imp.load_module('_kcftracker', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _kcftracker = swig_import_helper()
    del swig_import_helper
else:
    import _kcftracker
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



import sys as _sys
if _sys.byteorder == 'little':
    _cv_numpy_endianess = '<'
else:
    _cv_numpy_endianess = '>'

_cv_numpy_typestr_map = {}
_cv_numpy_bla = {}


_kcftracker.CV_VERSION_MAJOR_swigconstant(_kcftracker)
CV_VERSION_MAJOR = _kcftracker.CV_VERSION_MAJOR

_kcftracker.CV_VERSION_MINOR_swigconstant(_kcftracker)
CV_VERSION_MINOR = _kcftracker.CV_VERSION_MINOR

_kcftracker.CV_VERSION_REVISION_swigconstant(_kcftracker)
CV_VERSION_REVISION = _kcftracker.CV_VERSION_REVISION

_kcftracker.CV_VERSION_STATUS_swigconstant(_kcftracker)
CV_VERSION_STATUS = _kcftracker.CV_VERSION_STATUS

_kcftracker.CV_VERSION_swigconstant(_kcftracker)
CV_VERSION = _kcftracker.CV_VERSION

_kcftracker.CV_MAJOR_VERSION_swigconstant(_kcftracker)
CV_MAJOR_VERSION = _kcftracker.CV_MAJOR_VERSION

_kcftracker.CV_MINOR_VERSION_swigconstant(_kcftracker)
CV_MINOR_VERSION = _kcftracker.CV_MINOR_VERSION

_kcftracker.CV_SUBMINOR_VERSION_swigconstant(_kcftracker)
CV_SUBMINOR_VERSION = _kcftracker.CV_SUBMINOR_VERSION
class DataType_bool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataType_bool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataType_bool, name)
    __repr__ = _swig_repr
    generic_type = _kcftracker.DataType_bool_generic_type
    channels = _kcftracker.DataType_bool_channels
    fmt = _kcftracker.DataType_bool_fmt

    def __init__(self):
        this = _kcftracker.new_DataType_bool()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete_DataType_bool
    __del__ = lambda self: None
DataType_bool_swigregister = _kcftracker.DataType_bool_swigregister
DataType_bool_swigregister(DataType_bool)

class DataType_uchar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataType_uchar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataType_uchar, name)
    __repr__ = _swig_repr
    generic_type = _kcftracker.DataType_uchar_generic_type
    channels = _kcftracker.DataType_uchar_channels
    fmt = _kcftracker.DataType_uchar_fmt

    def __init__(self):
        this = _kcftracker.new_DataType_uchar()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete_DataType_uchar
    __del__ = lambda self: None
DataType_uchar_swigregister = _kcftracker.DataType_uchar_swigregister
DataType_uchar_swigregister(DataType_uchar)

class DataType_schar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataType_schar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataType_schar, name)
    __repr__ = _swig_repr
    generic_type = _kcftracker.DataType_schar_generic_type
    channels = _kcftracker.DataType_schar_channels
    fmt = _kcftracker.DataType_schar_fmt

    def __init__(self):
        this = _kcftracker.new_DataType_schar()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete_DataType_schar
    __del__ = lambda self: None
DataType_schar_swigregister = _kcftracker.DataType_schar_swigregister
DataType_schar_swigregister(DataType_schar)

class DataType_char(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataType_char, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataType_char, name)
    __repr__ = _swig_repr
    generic_type = _kcftracker.DataType_char_generic_type
    channels = _kcftracker.DataType_char_channels
    fmt = _kcftracker.DataType_char_fmt

    def __init__(self):
        this = _kcftracker.new_DataType_char()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete_DataType_char
    __del__ = lambda self: None
DataType_char_swigregister = _kcftracker.DataType_char_swigregister
DataType_char_swigregister(DataType_char)

class DataType_ushort(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataType_ushort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataType_ushort, name)
    __repr__ = _swig_repr
    generic_type = _kcftracker.DataType_ushort_generic_type
    channels = _kcftracker.DataType_ushort_channels
    fmt = _kcftracker.DataType_ushort_fmt

    def __init__(self):
        this = _kcftracker.new_DataType_ushort()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete_DataType_ushort
    __del__ = lambda self: None
DataType_ushort_swigregister = _kcftracker.DataType_ushort_swigregister
DataType_ushort_swigregister(DataType_ushort)

class DataType_short(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataType_short, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataType_short, name)
    __repr__ = _swig_repr
    generic_type = _kcftracker.DataType_short_generic_type
    channels = _kcftracker.DataType_short_channels
    fmt = _kcftracker.DataType_short_fmt

    def __init__(self):
        this = _kcftracker.new_DataType_short()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete_DataType_short
    __del__ = lambda self: None
DataType_short_swigregister = _kcftracker.DataType_short_swigregister
DataType_short_swigregister(DataType_short)

class DataType_int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataType_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataType_int, name)
    __repr__ = _swig_repr
    generic_type = _kcftracker.DataType_int_generic_type
    channels = _kcftracker.DataType_int_channels
    fmt = _kcftracker.DataType_int_fmt

    def __init__(self):
        this = _kcftracker.new_DataType_int()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete_DataType_int
    __del__ = lambda self: None
DataType_int_swigregister = _kcftracker.DataType_int_swigregister
DataType_int_swigregister(DataType_int)

class DataType_float(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataType_float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataType_float, name)
    __repr__ = _swig_repr
    generic_type = _kcftracker.DataType_float_generic_type
    channels = _kcftracker.DataType_float_channels
    fmt = _kcftracker.DataType_float_fmt

    def __init__(self):
        this = _kcftracker.new_DataType_float()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete_DataType_float
    __del__ = lambda self: None
DataType_float_swigregister = _kcftracker.DataType_float_swigregister
DataType_float_swigregister(DataType_float)

class DataType_double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataType_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataType_double, name)
    __repr__ = _swig_repr
    generic_type = _kcftracker.DataType_double_generic_type
    channels = _kcftracker.DataType_double_channels
    fmt = _kcftracker.DataType_double_fmt

    def __init__(self):
        this = _kcftracker.new_DataType_double()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete_DataType_double
    __del__ = lambda self: None
DataType_double_swigregister = _kcftracker.DataType_double_swigregister
DataType_double_swigregister(DataType_double)

class Range(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Range, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Range, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _kcftracker.new_Range(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def size(self):
        return _kcftracker.Range_size(self)

    def empty(self):
        return _kcftracker.Range_empty(self)
    __swig_getmethods__["all"] = lambda x: _kcftracker.Range_all
    if _newclass:
        all = staticmethod(_kcftracker.Range_all)
    __swig_setmethods__["start"] = _kcftracker.Range_start_set
    __swig_getmethods__["start"] = _kcftracker.Range_start_get
    if _newclass:
        start = _swig_property(_kcftracker.Range_start_get, _kcftracker.Range_start_set)
    __swig_setmethods__["end"] = _kcftracker.Range_end_set
    __swig_getmethods__["end"] = _kcftracker.Range_end_get
    if _newclass:
        end = _swig_property(_kcftracker.Range_end_get, _kcftracker.Range_end_set)
    __swig_destroy__ = _kcftracker.delete_Range
    __del__ = lambda self: None
Range_swigregister = _kcftracker.Range_swigregister
Range_swigregister(Range)

def Range_all():
    return _kcftracker.Range_all()
Range_all = _kcftracker.Range_all

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _kcftracker.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _kcftracker.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _kcftracker.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _kcftracker.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _kcftracker.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _kcftracker.SwigPyIterator_equal(self, x)

    def copy(self):
        return _kcftracker.SwigPyIterator_copy(self)

    def next(self):
        return _kcftracker.SwigPyIterator_next(self)

    def __next__(self):
        return _kcftracker.SwigPyIterator___next__(self)

    def previous(self):
        return _kcftracker.SwigPyIterator_previous(self)

    def advance(self, n):
        return _kcftracker.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _kcftracker.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _kcftracker.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _kcftracker.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _kcftracker.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _kcftracker.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _kcftracker.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _kcftracker.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_array_map = {}

class Matx_AddOp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matx_AddOp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matx_AddOp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _kcftracker.new_Matx_AddOp()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete_Matx_AddOp
    __del__ = lambda self: None
Matx_AddOp_swigregister = _kcftracker.Matx_AddOp_swigregister
Matx_AddOp_swigregister(Matx_AddOp)

class Matx_SubOp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matx_SubOp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matx_SubOp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _kcftracker.new_Matx_SubOp()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete_Matx_SubOp
    __del__ = lambda self: None
Matx_SubOp_swigregister = _kcftracker.Matx_SubOp_swigregister
Matx_SubOp_swigregister(Matx_SubOp)

class Matx_ScaleOp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matx_ScaleOp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matx_ScaleOp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _kcftracker.new_Matx_ScaleOp()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete_Matx_ScaleOp
    __del__ = lambda self: None
Matx_ScaleOp_swigregister = _kcftracker.Matx_ScaleOp_swigregister
Matx_ScaleOp_swigregister(Matx_ScaleOp)

class Matx_MulOp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matx_MulOp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matx_MulOp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _kcftracker.new_Matx_MulOp()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete_Matx_MulOp
    __del__ = lambda self: None
Matx_MulOp_swigregister = _kcftracker.Matx_MulOp_swigregister
Matx_MulOp_swigregister(Matx_MulOp)

class Matx_DivOp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matx_DivOp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matx_DivOp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _kcftracker.new_Matx_DivOp()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete_Matx_DivOp
    __del__ = lambda self: None
Matx_DivOp_swigregister = _kcftracker.Matx_DivOp_swigregister
Matx_DivOp_swigregister(Matx_DivOp)

class Matx_MatMulOp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matx_MatMulOp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matx_MatMulOp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _kcftracker.new_Matx_MatMulOp()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete_Matx_MatMulOp
    __del__ = lambda self: None
Matx_MatMulOp_swigregister = _kcftracker.Matx_MatMulOp_swigregister
Matx_MatMulOp_swigregister(Matx_MatMulOp)

class Matx_TOp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matx_TOp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matx_TOp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _kcftracker.new_Matx_TOp()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete_Matx_TOp
    __del__ = lambda self: None
Matx_TOp_swigregister = _kcftracker.Matx_TOp_swigregister
Matx_TOp_swigregister(Matx_TOp)

class Mat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mat, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _kcftracker.delete_Mat
    __del__ = lambda self: None

    def row(self, y):
        return _kcftracker.Mat_row(self, y)

    def col(self, x):
        return _kcftracker.Mat_col(self, x)

    def rowRange(self, *args):
        return _kcftracker.Mat_rowRange(self, *args)

    def colRange(self, *args):
        return _kcftracker.Mat_colRange(self, *args)

    def diag(self, d=0):
        return _kcftracker.Mat_diag(self, d)

    def clone(self):
        return _kcftracker.Mat_clone(self)

    def assignTo(self, m, type=-1):
        return _kcftracker.Mat_assignTo(self, m, type)

    def reshape(self, *args):
        return _kcftracker.Mat_reshape(self, *args)

    def create(self, *args):
        return _kcftracker.Mat_create(self, *args)

    def addref(self):
        return _kcftracker.Mat_addref(self)

    def release(self):
        return _kcftracker.Mat_release(self)

    def deallocate(self):
        return _kcftracker.Mat_deallocate(self)

    def copySize(self, m):
        return _kcftracker.Mat_copySize(self, m)

    def reserve(self, sz):
        return _kcftracker.Mat_reserve(self, sz)

    def resize(self, *args):
        return _kcftracker.Mat_resize(self, *args)

    def push_back_(self, elem):
        return _kcftracker.Mat_push_back_(self, elem)

    def push_back(self, m):
        return _kcftracker.Mat_push_back(self, m)

    def pop_back(self, nelems=1):
        return _kcftracker.Mat_pop_back(self, nelems)

    def locateROI(self, wholeSize, ofs):
        return _kcftracker.Mat_locateROI(self, wholeSize, ofs)

    def adjustROI(self, dtop, dbottom, dleft, dright):
        return _kcftracker.Mat_adjustROI(self, dtop, dbottom, dleft, dright)

    def __call__(self, *args):
        return _kcftracker.Mat___call__(self, *args)

    def isContinuous(self):
        return _kcftracker.Mat_isContinuous(self)

    def isSubmatrix(self):
        return _kcftracker.Mat_isSubmatrix(self)

    def elemSize(self):
        return _kcftracker.Mat_elemSize(self)

    def elemSize1(self):
        return _kcftracker.Mat_elemSize1(self)

    def type(self):
        return _kcftracker.Mat_type(self)

    def depth(self):
        return _kcftracker.Mat_depth(self)

    def channels(self):
        return _kcftracker.Mat_channels(self)

    def step1(self, i=0):
        return _kcftracker.Mat_step1(self, i)

    def empty(self):
        return _kcftracker.Mat_empty(self)

    def total(self):
        return _kcftracker.Mat_total(self)

    def checkVector(self, elemChannels, depth=-1, requireContinuous=True):
        return _kcftracker.Mat_checkVector(self, elemChannels, depth, requireContinuous)

    def ptr(self, *args):
        return _kcftracker.Mat_ptr(self, *args)
    MAGIC_VAL = _kcftracker.Mat_MAGIC_VAL
    AUTO_STEP = _kcftracker.Mat_AUTO_STEP
    CONTINUOUS_FLAG = _kcftracker.Mat_CONTINUOUS_FLAG
    SUBMATRIX_FLAG = _kcftracker.Mat_SUBMATRIX_FLAG
    MAGIC_MASK = _kcftracker.Mat_MAGIC_MASK
    TYPE_MASK = _kcftracker.Mat_TYPE_MASK
    DEPTH_MASK = _kcftracker.Mat_DEPTH_MASK
    __swig_setmethods__["flags"] = _kcftracker.Mat_flags_set
    __swig_getmethods__["flags"] = _kcftracker.Mat_flags_get
    if _newclass:
        flags = _swig_property(_kcftracker.Mat_flags_get, _kcftracker.Mat_flags_set)
    __swig_setmethods__["dims"] = _kcftracker.Mat_dims_set
    __swig_getmethods__["dims"] = _kcftracker.Mat_dims_get
    if _newclass:
        dims = _swig_property(_kcftracker.Mat_dims_get, _kcftracker.Mat_dims_set)
    __swig_setmethods__["rows"] = _kcftracker.Mat_rows_set
    __swig_getmethods__["rows"] = _kcftracker.Mat_rows_get
    if _newclass:
        rows = _swig_property(_kcftracker.Mat_rows_get, _kcftracker.Mat_rows_set)
    __swig_setmethods__["cols"] = _kcftracker.Mat_cols_set
    __swig_getmethods__["cols"] = _kcftracker.Mat_cols_get
    if _newclass:
        cols = _swig_property(_kcftracker.Mat_cols_get, _kcftracker.Mat_cols_set)
    __swig_setmethods__["data"] = _kcftracker.Mat_data_set
    __swig_getmethods__["data"] = _kcftracker.Mat_data_get
    if _newclass:
        data = _swig_property(_kcftracker.Mat_data_get, _kcftracker.Mat_data_set)
    __swig_setmethods__["datastart"] = _kcftracker.Mat_datastart_set
    __swig_getmethods__["datastart"] = _kcftracker.Mat_datastart_get
    if _newclass:
        datastart = _swig_property(_kcftracker.Mat_datastart_get, _kcftracker.Mat_datastart_set)
    __swig_setmethods__["dataend"] = _kcftracker.Mat_dataend_set
    __swig_getmethods__["dataend"] = _kcftracker.Mat_dataend_get
    if _newclass:
        dataend = _swig_property(_kcftracker.Mat_dataend_get, _kcftracker.Mat_dataend_set)
    __swig_setmethods__["datalimit"] = _kcftracker.Mat_datalimit_set
    __swig_getmethods__["datalimit"] = _kcftracker.Mat_datalimit_get
    if _newclass:
        datalimit = _swig_property(_kcftracker.Mat_datalimit_get, _kcftracker.Mat_datalimit_set)

    def __init__(self, *args):
        this = _kcftracker.new_Mat(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def _typestr(self):
        typestr = _depthToDtype(self.depth())
        if typestr[-1] == '1':
            typestr = '|' + typestr
        else:
            typestr = _cv_numpy_endianess + typestr

        return typestr


    @classmethod
    def __get_channels(cls, array):
        if len(array.shape) == 3:
            n_channel = array.shape[2]
            if n_channel == 1:
                raise ValueError("{} expects an one channel numpy ndarray be 2-dimensional.".format(cls))
        elif len(array.shape) == 2:
            n_channel = 1
        else:
            raise ValueError("{} supports only 2 or 3-dimensional numpy ndarray.".format(cls))

        return n_channel


    def __getattribute__(self, name):
        if name == "__array_interface__":
            n_channels = self.channels()
            if n_channels == 1:
                shape = (self.rows, self.cols)
            else:
                shape = (self.rows, self.cols, n_channels)

            return {"shape": shape,
                    "typestr": self._typestr(),
                    "data": (int(self.data), False)}

        else:
            return object.__getattribute__(self, name)

    @classmethod
    def from_array(cls, array):
        import numpy as np
        array = np.asarray(array)

        dtype = array.__array_interface__['typestr']
        dtype = dtype[1:]

        n_channel = cls.__get_channels(array)

        new_mat = Mat(array.shape[0],
                      array.shape[1],
                      _toCvType(dtype, n_channel),
                      array.__array_interface__['data'][0])

    # Holds an internal reference to keep the image buffer alive
        new_mat._array = array

        return new_mat


    def __str__(self):
        return _kcftracker.Mat___str__(self)
Mat_swigregister = _kcftracker.Mat_swigregister
Mat_swigregister(Mat)

class _cv_numpy_sizeof_uint8_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cv_numpy_sizeof_uint8_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cv_numpy_sizeof_uint8_t, name)
    __repr__ = _swig_repr
    value = _kcftracker._cv_numpy_sizeof_uint8_t_value

    def __init__(self):
        this = _kcftracker.new__cv_numpy_sizeof_uint8_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete__cv_numpy_sizeof_uint8_t
    __del__ = lambda self: None
_cv_numpy_sizeof_uint8_t_swigregister = _kcftracker._cv_numpy_sizeof_uint8_t_swigregister
_cv_numpy_sizeof_uint8_t_swigregister(_cv_numpy_sizeof_uint8_t)


if _cv_numpy_sizeof_uint8_t.value == 1:
    _cv_numpy_typestr_map["uint8_t"] = "|" +"u" + "1"
else:
    _cv_numpy_typestr_map["uint8_t"] = _cv_numpy_endianess  +"u" + str(_cv_numpy_sizeof_uint8_t.value)

class _uint8_tArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _uint8_tArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _uint8_tArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _kcftracker._uint8_tArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _kcftracker._uint8_tArray___nonzero__(self)

    def __bool__(self):
        return _kcftracker._uint8_tArray___bool__(self)

    def __len__(self):
        return _kcftracker._uint8_tArray___len__(self)

    def __getslice__(self, i, j):
        return _kcftracker._uint8_tArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _kcftracker._uint8_tArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _kcftracker._uint8_tArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _kcftracker._uint8_tArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _kcftracker._uint8_tArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _kcftracker._uint8_tArray___setitem__(self, *args)

    def pop(self):
        return _kcftracker._uint8_tArray_pop(self)

    def append(self, x):
        return _kcftracker._uint8_tArray_append(self, x)

    def empty(self):
        return _kcftracker._uint8_tArray_empty(self)

    def size(self):
        return _kcftracker._uint8_tArray_size(self)

    def swap(self, v):
        return _kcftracker._uint8_tArray_swap(self, v)

    def begin(self):
        return _kcftracker._uint8_tArray_begin(self)

    def end(self):
        return _kcftracker._uint8_tArray_end(self)

    def rbegin(self):
        return _kcftracker._uint8_tArray_rbegin(self)

    def rend(self):
        return _kcftracker._uint8_tArray_rend(self)

    def clear(self):
        return _kcftracker._uint8_tArray_clear(self)

    def get_allocator(self):
        return _kcftracker._uint8_tArray_get_allocator(self)

    def pop_back(self):
        return _kcftracker._uint8_tArray_pop_back(self)

    def erase(self, *args):
        return _kcftracker._uint8_tArray_erase(self, *args)

    def __init__(self, *args):
        this = _kcftracker.new__uint8_tArray(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _kcftracker._uint8_tArray_push_back(self, x)

    def front(self):
        return _kcftracker._uint8_tArray_front(self)

    def back(self):
        return _kcftracker._uint8_tArray_back(self)

    def assign(self, n, x):
        return _kcftracker._uint8_tArray_assign(self, n, x)

    def resize(self, *args):
        return _kcftracker._uint8_tArray_resize(self, *args)

    def insert(self, *args):
        return _kcftracker._uint8_tArray_insert(self, *args)

    def reserve(self, n):
        return _kcftracker._uint8_tArray_reserve(self, n)

    def capacity(self):
        return _kcftracker._uint8_tArray_capacity(self)
    __swig_destroy__ = _kcftracker.delete__uint8_tArray
    __del__ = lambda self: None
_uint8_tArray_swigregister = _kcftracker._uint8_tArray_swigregister
_uint8_tArray_swigregister(_uint8_tArray)


_array_map["uint8_t"] = _uint8_tArray

class _Matx_uint8_t_2_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_uint8_t_2_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_uint8_t_2_1, name)
    __repr__ = _swig_repr
    rows = _kcftracker._Matx_uint8_t_2_1_rows
    cols = _kcftracker._Matx_uint8_t_2_1_cols
    channels = _kcftracker._Matx_uint8_t_2_1_channels
    shortdim = _kcftracker._Matx_uint8_t_2_1_shortdim
    __swig_getmethods__["all"] = lambda x: _kcftracker._Matx_uint8_t_2_1_all
    if _newclass:
        all = staticmethod(_kcftracker._Matx_uint8_t_2_1_all)
    __swig_getmethods__["zeros"] = lambda x: _kcftracker._Matx_uint8_t_2_1_zeros
    if _newclass:
        zeros = staticmethod(_kcftracker._Matx_uint8_t_2_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _kcftracker._Matx_uint8_t_2_1_ones
    if _newclass:
        ones = staticmethod(_kcftracker._Matx_uint8_t_2_1_ones)
    __swig_getmethods__["eye"] = lambda x: _kcftracker._Matx_uint8_t_2_1_eye
    if _newclass:
        eye = staticmethod(_kcftracker._Matx_uint8_t_2_1_eye)
    __swig_getmethods__["randu"] = lambda x: _kcftracker._Matx_uint8_t_2_1_randu
    if _newclass:
        randu = staticmethod(_kcftracker._Matx_uint8_t_2_1_randu)
    __swig_getmethods__["randn"] = lambda x: _kcftracker._Matx_uint8_t_2_1_randn
    if _newclass:
        randn = staticmethod(_kcftracker._Matx_uint8_t_2_1_randn)

    def dot(self, v):
        return _kcftracker._Matx_uint8_t_2_1_dot(self, v)

    def ddot(self, v):
        return _kcftracker._Matx_uint8_t_2_1_ddot(self, v)

    def t(self):
        return _kcftracker._Matx_uint8_t_2_1_t(self)

    def mul(self, a):
        return _kcftracker._Matx_uint8_t_2_1_mul(self, a)

    def div(self, a):
        return _kcftracker._Matx_uint8_t_2_1_div(self, a)

    def __call__(self, i, j):
        return _kcftracker._Matx_uint8_t_2_1___call__(self, i, j)
    __swig_setmethods__["val"] = _kcftracker._Matx_uint8_t_2_1_val_set
    __swig_getmethods__["val"] = _kcftracker._Matx_uint8_t_2_1_val_get
    if _newclass:
        val = _swig_property(_kcftracker._Matx_uint8_t_2_1_val_get, _kcftracker._Matx_uint8_t_2_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Matx_uint8_t_2_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _kcftracker._Matx_uint8_t_2_1___str__(self)
    __swig_destroy__ = _kcftracker.delete__Matx_uint8_t_2_1
    __del__ = lambda self: None
_Matx_uint8_t_2_1_swigregister = _kcftracker._Matx_uint8_t_2_1_swigregister
_Matx_uint8_t_2_1_swigregister(_Matx_uint8_t_2_1)

def _Matx_uint8_t_2_1_all(alpha):
    return _kcftracker._Matx_uint8_t_2_1_all(alpha)
_Matx_uint8_t_2_1_all = _kcftracker._Matx_uint8_t_2_1_all

def _Matx_uint8_t_2_1_zeros():
    return _kcftracker._Matx_uint8_t_2_1_zeros()
_Matx_uint8_t_2_1_zeros = _kcftracker._Matx_uint8_t_2_1_zeros

def _Matx_uint8_t_2_1_ones():
    return _kcftracker._Matx_uint8_t_2_1_ones()
_Matx_uint8_t_2_1_ones = _kcftracker._Matx_uint8_t_2_1_ones

def _Matx_uint8_t_2_1_eye():
    return _kcftracker._Matx_uint8_t_2_1_eye()
_Matx_uint8_t_2_1_eye = _kcftracker._Matx_uint8_t_2_1_eye

def _Matx_uint8_t_2_1_randu(a, b):
    return _kcftracker._Matx_uint8_t_2_1_randu(a, b)
_Matx_uint8_t_2_1_randu = _kcftracker._Matx_uint8_t_2_1_randu

def _Matx_uint8_t_2_1_randn(a, b):
    return _kcftracker._Matx_uint8_t_2_1_randn(a, b)
_Matx_uint8_t_2_1_randn = _kcftracker._Matx_uint8_t_2_1_randn


Matx21b = _Matx_uint8_t_2_1

class _Vec_uint8_t_2(_Matx_uint8_t_2_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_uint8_t_2_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_uint8_t_2, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_uint8_t_2_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_uint8_t_2, name)
    __repr__ = _swig_repr
    channels = _kcftracker._Vec_uint8_t_2_channels
    __swig_getmethods__["all"] = lambda x: _kcftracker._Vec_uint8_t_2_all
    if _newclass:
        all = staticmethod(_kcftracker._Vec_uint8_t_2_all)

    def mul(self, v):
        return _kcftracker._Vec_uint8_t_2_mul(self, v)

    def __call__(self, i):
        return _kcftracker._Vec_uint8_t_2___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Vec_uint8_t_2(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _kcftracker._Vec_uint8_t_2___str__(self)
    __swig_destroy__ = _kcftracker.delete__Vec_uint8_t_2
    __del__ = lambda self: None
_Vec_uint8_t_2_swigregister = _kcftracker._Vec_uint8_t_2_swigregister
_Vec_uint8_t_2_swigregister(_Vec_uint8_t_2)

def _Vec_uint8_t_2_all(alpha):
    return _kcftracker._Vec_uint8_t_2_all(alpha)
_Vec_uint8_t_2_all = _kcftracker._Vec_uint8_t_2_all

class _DataType_Vec_uint8_t_2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_uint8_t_2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_uint8_t_2, name)
    __repr__ = _swig_repr
    generic_type = _kcftracker._DataType_Vec_uint8_t_2_generic_type
    channels = _kcftracker._DataType_Vec_uint8_t_2_channels
    fmt = _kcftracker._DataType_Vec_uint8_t_2_fmt

    def __init__(self):
        this = _kcftracker.new__DataType_Vec_uint8_t_2()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete__DataType_Vec_uint8_t_2
    __del__ = lambda self: None
_DataType_Vec_uint8_t_2_swigregister = _kcftracker._DataType_Vec_uint8_t_2_swigregister
_DataType_Vec_uint8_t_2_swigregister(_DataType_Vec_uint8_t_2)


Vec2b = _Vec_uint8_t_2
DataType_Vec2b = _DataType_Vec_uint8_t_2

class _Matx_uint8_t_3_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_uint8_t_3_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_uint8_t_3_1, name)
    __repr__ = _swig_repr
    rows = _kcftracker._Matx_uint8_t_3_1_rows
    cols = _kcftracker._Matx_uint8_t_3_1_cols
    channels = _kcftracker._Matx_uint8_t_3_1_channels
    shortdim = _kcftracker._Matx_uint8_t_3_1_shortdim
    __swig_getmethods__["all"] = lambda x: _kcftracker._Matx_uint8_t_3_1_all
    if _newclass:
        all = staticmethod(_kcftracker._Matx_uint8_t_3_1_all)
    __swig_getmethods__["zeros"] = lambda x: _kcftracker._Matx_uint8_t_3_1_zeros
    if _newclass:
        zeros = staticmethod(_kcftracker._Matx_uint8_t_3_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _kcftracker._Matx_uint8_t_3_1_ones
    if _newclass:
        ones = staticmethod(_kcftracker._Matx_uint8_t_3_1_ones)
    __swig_getmethods__["eye"] = lambda x: _kcftracker._Matx_uint8_t_3_1_eye
    if _newclass:
        eye = staticmethod(_kcftracker._Matx_uint8_t_3_1_eye)
    __swig_getmethods__["randu"] = lambda x: _kcftracker._Matx_uint8_t_3_1_randu
    if _newclass:
        randu = staticmethod(_kcftracker._Matx_uint8_t_3_1_randu)
    __swig_getmethods__["randn"] = lambda x: _kcftracker._Matx_uint8_t_3_1_randn
    if _newclass:
        randn = staticmethod(_kcftracker._Matx_uint8_t_3_1_randn)

    def dot(self, v):
        return _kcftracker._Matx_uint8_t_3_1_dot(self, v)

    def ddot(self, v):
        return _kcftracker._Matx_uint8_t_3_1_ddot(self, v)

    def t(self):
        return _kcftracker._Matx_uint8_t_3_1_t(self)

    def mul(self, a):
        return _kcftracker._Matx_uint8_t_3_1_mul(self, a)

    def div(self, a):
        return _kcftracker._Matx_uint8_t_3_1_div(self, a)

    def __call__(self, i, j):
        return _kcftracker._Matx_uint8_t_3_1___call__(self, i, j)
    __swig_setmethods__["val"] = _kcftracker._Matx_uint8_t_3_1_val_set
    __swig_getmethods__["val"] = _kcftracker._Matx_uint8_t_3_1_val_get
    if _newclass:
        val = _swig_property(_kcftracker._Matx_uint8_t_3_1_val_get, _kcftracker._Matx_uint8_t_3_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Matx_uint8_t_3_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _kcftracker._Matx_uint8_t_3_1___str__(self)
    __swig_destroy__ = _kcftracker.delete__Matx_uint8_t_3_1
    __del__ = lambda self: None
_Matx_uint8_t_3_1_swigregister = _kcftracker._Matx_uint8_t_3_1_swigregister
_Matx_uint8_t_3_1_swigregister(_Matx_uint8_t_3_1)

def _Matx_uint8_t_3_1_all(alpha):
    return _kcftracker._Matx_uint8_t_3_1_all(alpha)
_Matx_uint8_t_3_1_all = _kcftracker._Matx_uint8_t_3_1_all

def _Matx_uint8_t_3_1_zeros():
    return _kcftracker._Matx_uint8_t_3_1_zeros()
_Matx_uint8_t_3_1_zeros = _kcftracker._Matx_uint8_t_3_1_zeros

def _Matx_uint8_t_3_1_ones():
    return _kcftracker._Matx_uint8_t_3_1_ones()
_Matx_uint8_t_3_1_ones = _kcftracker._Matx_uint8_t_3_1_ones

def _Matx_uint8_t_3_1_eye():
    return _kcftracker._Matx_uint8_t_3_1_eye()
_Matx_uint8_t_3_1_eye = _kcftracker._Matx_uint8_t_3_1_eye

def _Matx_uint8_t_3_1_randu(a, b):
    return _kcftracker._Matx_uint8_t_3_1_randu(a, b)
_Matx_uint8_t_3_1_randu = _kcftracker._Matx_uint8_t_3_1_randu

def _Matx_uint8_t_3_1_randn(a, b):
    return _kcftracker._Matx_uint8_t_3_1_randn(a, b)
_Matx_uint8_t_3_1_randn = _kcftracker._Matx_uint8_t_3_1_randn


Matx31b = _Matx_uint8_t_3_1

class _Vec_uint8_t_3(_Matx_uint8_t_3_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_uint8_t_3_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_uint8_t_3, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_uint8_t_3_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_uint8_t_3, name)
    __repr__ = _swig_repr
    channels = _kcftracker._Vec_uint8_t_3_channels
    __swig_getmethods__["all"] = lambda x: _kcftracker._Vec_uint8_t_3_all
    if _newclass:
        all = staticmethod(_kcftracker._Vec_uint8_t_3_all)

    def mul(self, v):
        return _kcftracker._Vec_uint8_t_3_mul(self, v)

    def __call__(self, i):
        return _kcftracker._Vec_uint8_t_3___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Vec_uint8_t_3(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _kcftracker._Vec_uint8_t_3___str__(self)
    __swig_destroy__ = _kcftracker.delete__Vec_uint8_t_3
    __del__ = lambda self: None
_Vec_uint8_t_3_swigregister = _kcftracker._Vec_uint8_t_3_swigregister
_Vec_uint8_t_3_swigregister(_Vec_uint8_t_3)

def _Vec_uint8_t_3_all(alpha):
    return _kcftracker._Vec_uint8_t_3_all(alpha)
_Vec_uint8_t_3_all = _kcftracker._Vec_uint8_t_3_all

class _DataType_Vec_uint8_t_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_uint8_t_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_uint8_t_3, name)
    __repr__ = _swig_repr
    generic_type = _kcftracker._DataType_Vec_uint8_t_3_generic_type
    channels = _kcftracker._DataType_Vec_uint8_t_3_channels
    fmt = _kcftracker._DataType_Vec_uint8_t_3_fmt

    def __init__(self):
        this = _kcftracker.new__DataType_Vec_uint8_t_3()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete__DataType_Vec_uint8_t_3
    __del__ = lambda self: None
_DataType_Vec_uint8_t_3_swigregister = _kcftracker._DataType_Vec_uint8_t_3_swigregister
_DataType_Vec_uint8_t_3_swigregister(_DataType_Vec_uint8_t_3)


Vec3b = _Vec_uint8_t_3
DataType_Vec3b = _DataType_Vec_uint8_t_3

class _Matx_uint8_t_4_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_uint8_t_4_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_uint8_t_4_1, name)
    __repr__ = _swig_repr
    rows = _kcftracker._Matx_uint8_t_4_1_rows
    cols = _kcftracker._Matx_uint8_t_4_1_cols
    channels = _kcftracker._Matx_uint8_t_4_1_channels
    shortdim = _kcftracker._Matx_uint8_t_4_1_shortdim
    __swig_getmethods__["all"] = lambda x: _kcftracker._Matx_uint8_t_4_1_all
    if _newclass:
        all = staticmethod(_kcftracker._Matx_uint8_t_4_1_all)
    __swig_getmethods__["zeros"] = lambda x: _kcftracker._Matx_uint8_t_4_1_zeros
    if _newclass:
        zeros = staticmethod(_kcftracker._Matx_uint8_t_4_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _kcftracker._Matx_uint8_t_4_1_ones
    if _newclass:
        ones = staticmethod(_kcftracker._Matx_uint8_t_4_1_ones)
    __swig_getmethods__["eye"] = lambda x: _kcftracker._Matx_uint8_t_4_1_eye
    if _newclass:
        eye = staticmethod(_kcftracker._Matx_uint8_t_4_1_eye)
    __swig_getmethods__["randu"] = lambda x: _kcftracker._Matx_uint8_t_4_1_randu
    if _newclass:
        randu = staticmethod(_kcftracker._Matx_uint8_t_4_1_randu)
    __swig_getmethods__["randn"] = lambda x: _kcftracker._Matx_uint8_t_4_1_randn
    if _newclass:
        randn = staticmethod(_kcftracker._Matx_uint8_t_4_1_randn)

    def dot(self, v):
        return _kcftracker._Matx_uint8_t_4_1_dot(self, v)

    def ddot(self, v):
        return _kcftracker._Matx_uint8_t_4_1_ddot(self, v)

    def t(self):
        return _kcftracker._Matx_uint8_t_4_1_t(self)

    def mul(self, a):
        return _kcftracker._Matx_uint8_t_4_1_mul(self, a)

    def div(self, a):
        return _kcftracker._Matx_uint8_t_4_1_div(self, a)

    def __call__(self, i, j):
        return _kcftracker._Matx_uint8_t_4_1___call__(self, i, j)
    __swig_setmethods__["val"] = _kcftracker._Matx_uint8_t_4_1_val_set
    __swig_getmethods__["val"] = _kcftracker._Matx_uint8_t_4_1_val_get
    if _newclass:
        val = _swig_property(_kcftracker._Matx_uint8_t_4_1_val_get, _kcftracker._Matx_uint8_t_4_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Matx_uint8_t_4_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _kcftracker._Matx_uint8_t_4_1___str__(self)
    __swig_destroy__ = _kcftracker.delete__Matx_uint8_t_4_1
    __del__ = lambda self: None
_Matx_uint8_t_4_1_swigregister = _kcftracker._Matx_uint8_t_4_1_swigregister
_Matx_uint8_t_4_1_swigregister(_Matx_uint8_t_4_1)

def _Matx_uint8_t_4_1_all(alpha):
    return _kcftracker._Matx_uint8_t_4_1_all(alpha)
_Matx_uint8_t_4_1_all = _kcftracker._Matx_uint8_t_4_1_all

def _Matx_uint8_t_4_1_zeros():
    return _kcftracker._Matx_uint8_t_4_1_zeros()
_Matx_uint8_t_4_1_zeros = _kcftracker._Matx_uint8_t_4_1_zeros

def _Matx_uint8_t_4_1_ones():
    return _kcftracker._Matx_uint8_t_4_1_ones()
_Matx_uint8_t_4_1_ones = _kcftracker._Matx_uint8_t_4_1_ones

def _Matx_uint8_t_4_1_eye():
    return _kcftracker._Matx_uint8_t_4_1_eye()
_Matx_uint8_t_4_1_eye = _kcftracker._Matx_uint8_t_4_1_eye

def _Matx_uint8_t_4_1_randu(a, b):
    return _kcftracker._Matx_uint8_t_4_1_randu(a, b)
_Matx_uint8_t_4_1_randu = _kcftracker._Matx_uint8_t_4_1_randu

def _Matx_uint8_t_4_1_randn(a, b):
    return _kcftracker._Matx_uint8_t_4_1_randn(a, b)
_Matx_uint8_t_4_1_randn = _kcftracker._Matx_uint8_t_4_1_randn


Matx41b = _Matx_uint8_t_4_1

class _Vec_uint8_t_4(_Matx_uint8_t_4_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_uint8_t_4_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_uint8_t_4, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_uint8_t_4_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_uint8_t_4, name)
    __repr__ = _swig_repr
    channels = _kcftracker._Vec_uint8_t_4_channels
    __swig_getmethods__["all"] = lambda x: _kcftracker._Vec_uint8_t_4_all
    if _newclass:
        all = staticmethod(_kcftracker._Vec_uint8_t_4_all)

    def mul(self, v):
        return _kcftracker._Vec_uint8_t_4_mul(self, v)

    def __call__(self, i):
        return _kcftracker._Vec_uint8_t_4___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Vec_uint8_t_4(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _kcftracker._Vec_uint8_t_4___str__(self)
    __swig_destroy__ = _kcftracker.delete__Vec_uint8_t_4
    __del__ = lambda self: None
_Vec_uint8_t_4_swigregister = _kcftracker._Vec_uint8_t_4_swigregister
_Vec_uint8_t_4_swigregister(_Vec_uint8_t_4)

def _Vec_uint8_t_4_all(alpha):
    return _kcftracker._Vec_uint8_t_4_all(alpha)
_Vec_uint8_t_4_all = _kcftracker._Vec_uint8_t_4_all

class _DataType_Vec_uint8_t_4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_uint8_t_4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_uint8_t_4, name)
    __repr__ = _swig_repr
    generic_type = _kcftracker._DataType_Vec_uint8_t_4_generic_type
    channels = _kcftracker._DataType_Vec_uint8_t_4_channels
    fmt = _kcftracker._DataType_Vec_uint8_t_4_fmt

    def __init__(self):
        this = _kcftracker.new__DataType_Vec_uint8_t_4()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete__DataType_Vec_uint8_t_4
    __del__ = lambda self: None
_DataType_Vec_uint8_t_4_swigregister = _kcftracker._DataType_Vec_uint8_t_4_swigregister
_DataType_Vec_uint8_t_4_swigregister(_DataType_Vec_uint8_t_4)


Vec4b = _Vec_uint8_t_4
DataType_Vec4b = _DataType_Vec_uint8_t_4

class _cv_numpy_sizeof_short(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cv_numpy_sizeof_short, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cv_numpy_sizeof_short, name)
    __repr__ = _swig_repr
    value = _kcftracker._cv_numpy_sizeof_short_value

    def __init__(self):
        this = _kcftracker.new__cv_numpy_sizeof_short()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete__cv_numpy_sizeof_short
    __del__ = lambda self: None
_cv_numpy_sizeof_short_swigregister = _kcftracker._cv_numpy_sizeof_short_swigregister
_cv_numpy_sizeof_short_swigregister(_cv_numpy_sizeof_short)


if _cv_numpy_sizeof_short.value == 1:
    _cv_numpy_typestr_map["short"] = "|" +"i" + "1"
else:
    _cv_numpy_typestr_map["short"] = _cv_numpy_endianess  +"i" + str(_cv_numpy_sizeof_short.value)

class _shortArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _shortArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _shortArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _kcftracker._shortArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _kcftracker._shortArray___nonzero__(self)

    def __bool__(self):
        return _kcftracker._shortArray___bool__(self)

    def __len__(self):
        return _kcftracker._shortArray___len__(self)

    def __getslice__(self, i, j):
        return _kcftracker._shortArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _kcftracker._shortArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _kcftracker._shortArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _kcftracker._shortArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _kcftracker._shortArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _kcftracker._shortArray___setitem__(self, *args)

    def pop(self):
        return _kcftracker._shortArray_pop(self)

    def append(self, x):
        return _kcftracker._shortArray_append(self, x)

    def empty(self):
        return _kcftracker._shortArray_empty(self)

    def size(self):
        return _kcftracker._shortArray_size(self)

    def swap(self, v):
        return _kcftracker._shortArray_swap(self, v)

    def begin(self):
        return _kcftracker._shortArray_begin(self)

    def end(self):
        return _kcftracker._shortArray_end(self)

    def rbegin(self):
        return _kcftracker._shortArray_rbegin(self)

    def rend(self):
        return _kcftracker._shortArray_rend(self)

    def clear(self):
        return _kcftracker._shortArray_clear(self)

    def get_allocator(self):
        return _kcftracker._shortArray_get_allocator(self)

    def pop_back(self):
        return _kcftracker._shortArray_pop_back(self)

    def erase(self, *args):
        return _kcftracker._shortArray_erase(self, *args)

    def __init__(self, *args):
        this = _kcftracker.new__shortArray(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _kcftracker._shortArray_push_back(self, x)

    def front(self):
        return _kcftracker._shortArray_front(self)

    def back(self):
        return _kcftracker._shortArray_back(self)

    def assign(self, n, x):
        return _kcftracker._shortArray_assign(self, n, x)

    def resize(self, *args):
        return _kcftracker._shortArray_resize(self, *args)

    def insert(self, *args):
        return _kcftracker._shortArray_insert(self, *args)

    def reserve(self, n):
        return _kcftracker._shortArray_reserve(self, n)

    def capacity(self):
        return _kcftracker._shortArray_capacity(self)
    __swig_destroy__ = _kcftracker.delete__shortArray
    __del__ = lambda self: None
_shortArray_swigregister = _kcftracker._shortArray_swigregister
_shortArray_swigregister(_shortArray)


_array_map["short"] = _shortArray

class _Matx_short_2_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_short_2_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_short_2_1, name)
    __repr__ = _swig_repr
    rows = _kcftracker._Matx_short_2_1_rows
    cols = _kcftracker._Matx_short_2_1_cols
    channels = _kcftracker._Matx_short_2_1_channels
    shortdim = _kcftracker._Matx_short_2_1_shortdim
    __swig_getmethods__["all"] = lambda x: _kcftracker._Matx_short_2_1_all
    if _newclass:
        all = staticmethod(_kcftracker._Matx_short_2_1_all)
    __swig_getmethods__["zeros"] = lambda x: _kcftracker._Matx_short_2_1_zeros
    if _newclass:
        zeros = staticmethod(_kcftracker._Matx_short_2_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _kcftracker._Matx_short_2_1_ones
    if _newclass:
        ones = staticmethod(_kcftracker._Matx_short_2_1_ones)
    __swig_getmethods__["eye"] = lambda x: _kcftracker._Matx_short_2_1_eye
    if _newclass:
        eye = staticmethod(_kcftracker._Matx_short_2_1_eye)
    __swig_getmethods__["randu"] = lambda x: _kcftracker._Matx_short_2_1_randu
    if _newclass:
        randu = staticmethod(_kcftracker._Matx_short_2_1_randu)
    __swig_getmethods__["randn"] = lambda x: _kcftracker._Matx_short_2_1_randn
    if _newclass:
        randn = staticmethod(_kcftracker._Matx_short_2_1_randn)

    def dot(self, v):
        return _kcftracker._Matx_short_2_1_dot(self, v)

    def ddot(self, v):
        return _kcftracker._Matx_short_2_1_ddot(self, v)

    def t(self):
        return _kcftracker._Matx_short_2_1_t(self)

    def mul(self, a):
        return _kcftracker._Matx_short_2_1_mul(self, a)

    def div(self, a):
        return _kcftracker._Matx_short_2_1_div(self, a)

    def __call__(self, i, j):
        return _kcftracker._Matx_short_2_1___call__(self, i, j)
    __swig_setmethods__["val"] = _kcftracker._Matx_short_2_1_val_set
    __swig_getmethods__["val"] = _kcftracker._Matx_short_2_1_val_get
    if _newclass:
        val = _swig_property(_kcftracker._Matx_short_2_1_val_get, _kcftracker._Matx_short_2_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Matx_short_2_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _kcftracker._Matx_short_2_1___str__(self)
    __swig_destroy__ = _kcftracker.delete__Matx_short_2_1
    __del__ = lambda self: None
_Matx_short_2_1_swigregister = _kcftracker._Matx_short_2_1_swigregister
_Matx_short_2_1_swigregister(_Matx_short_2_1)

def _Matx_short_2_1_all(alpha):
    return _kcftracker._Matx_short_2_1_all(alpha)
_Matx_short_2_1_all = _kcftracker._Matx_short_2_1_all

def _Matx_short_2_1_zeros():
    return _kcftracker._Matx_short_2_1_zeros()
_Matx_short_2_1_zeros = _kcftracker._Matx_short_2_1_zeros

def _Matx_short_2_1_ones():
    return _kcftracker._Matx_short_2_1_ones()
_Matx_short_2_1_ones = _kcftracker._Matx_short_2_1_ones

def _Matx_short_2_1_eye():
    return _kcftracker._Matx_short_2_1_eye()
_Matx_short_2_1_eye = _kcftracker._Matx_short_2_1_eye

def _Matx_short_2_1_randu(a, b):
    return _kcftracker._Matx_short_2_1_randu(a, b)
_Matx_short_2_1_randu = _kcftracker._Matx_short_2_1_randu

def _Matx_short_2_1_randn(a, b):
    return _kcftracker._Matx_short_2_1_randn(a, b)
_Matx_short_2_1_randn = _kcftracker._Matx_short_2_1_randn


Matx21s = _Matx_short_2_1

class _Vec_short_2(_Matx_short_2_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_short_2_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_short_2, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_short_2_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_short_2, name)
    __repr__ = _swig_repr
    channels = _kcftracker._Vec_short_2_channels
    __swig_getmethods__["all"] = lambda x: _kcftracker._Vec_short_2_all
    if _newclass:
        all = staticmethod(_kcftracker._Vec_short_2_all)

    def mul(self, v):
        return _kcftracker._Vec_short_2_mul(self, v)

    def __call__(self, i):
        return _kcftracker._Vec_short_2___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Vec_short_2(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _kcftracker._Vec_short_2___str__(self)
    __swig_destroy__ = _kcftracker.delete__Vec_short_2
    __del__ = lambda self: None
_Vec_short_2_swigregister = _kcftracker._Vec_short_2_swigregister
_Vec_short_2_swigregister(_Vec_short_2)

def _Vec_short_2_all(alpha):
    return _kcftracker._Vec_short_2_all(alpha)
_Vec_short_2_all = _kcftracker._Vec_short_2_all

class _DataType_Vec_short_2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_short_2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_short_2, name)
    __repr__ = _swig_repr
    generic_type = _kcftracker._DataType_Vec_short_2_generic_type
    channels = _kcftracker._DataType_Vec_short_2_channels
    fmt = _kcftracker._DataType_Vec_short_2_fmt

    def __init__(self):
        this = _kcftracker.new__DataType_Vec_short_2()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete__DataType_Vec_short_2
    __del__ = lambda self: None
_DataType_Vec_short_2_swigregister = _kcftracker._DataType_Vec_short_2_swigregister
_DataType_Vec_short_2_swigregister(_DataType_Vec_short_2)


Vec2s = _Vec_short_2
DataType_Vec2s = _DataType_Vec_short_2

class _Matx_short_3_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_short_3_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_short_3_1, name)
    __repr__ = _swig_repr
    rows = _kcftracker._Matx_short_3_1_rows
    cols = _kcftracker._Matx_short_3_1_cols
    channels = _kcftracker._Matx_short_3_1_channels
    shortdim = _kcftracker._Matx_short_3_1_shortdim
    __swig_getmethods__["all"] = lambda x: _kcftracker._Matx_short_3_1_all
    if _newclass:
        all = staticmethod(_kcftracker._Matx_short_3_1_all)
    __swig_getmethods__["zeros"] = lambda x: _kcftracker._Matx_short_3_1_zeros
    if _newclass:
        zeros = staticmethod(_kcftracker._Matx_short_3_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _kcftracker._Matx_short_3_1_ones
    if _newclass:
        ones = staticmethod(_kcftracker._Matx_short_3_1_ones)
    __swig_getmethods__["eye"] = lambda x: _kcftracker._Matx_short_3_1_eye
    if _newclass:
        eye = staticmethod(_kcftracker._Matx_short_3_1_eye)
    __swig_getmethods__["randu"] = lambda x: _kcftracker._Matx_short_3_1_randu
    if _newclass:
        randu = staticmethod(_kcftracker._Matx_short_3_1_randu)
    __swig_getmethods__["randn"] = lambda x: _kcftracker._Matx_short_3_1_randn
    if _newclass:
        randn = staticmethod(_kcftracker._Matx_short_3_1_randn)

    def dot(self, v):
        return _kcftracker._Matx_short_3_1_dot(self, v)

    def ddot(self, v):
        return _kcftracker._Matx_short_3_1_ddot(self, v)

    def t(self):
        return _kcftracker._Matx_short_3_1_t(self)

    def mul(self, a):
        return _kcftracker._Matx_short_3_1_mul(self, a)

    def div(self, a):
        return _kcftracker._Matx_short_3_1_div(self, a)

    def __call__(self, i, j):
        return _kcftracker._Matx_short_3_1___call__(self, i, j)
    __swig_setmethods__["val"] = _kcftracker._Matx_short_3_1_val_set
    __swig_getmethods__["val"] = _kcftracker._Matx_short_3_1_val_get
    if _newclass:
        val = _swig_property(_kcftracker._Matx_short_3_1_val_get, _kcftracker._Matx_short_3_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Matx_short_3_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _kcftracker._Matx_short_3_1___str__(self)
    __swig_destroy__ = _kcftracker.delete__Matx_short_3_1
    __del__ = lambda self: None
_Matx_short_3_1_swigregister = _kcftracker._Matx_short_3_1_swigregister
_Matx_short_3_1_swigregister(_Matx_short_3_1)

def _Matx_short_3_1_all(alpha):
    return _kcftracker._Matx_short_3_1_all(alpha)
_Matx_short_3_1_all = _kcftracker._Matx_short_3_1_all

def _Matx_short_3_1_zeros():
    return _kcftracker._Matx_short_3_1_zeros()
_Matx_short_3_1_zeros = _kcftracker._Matx_short_3_1_zeros

def _Matx_short_3_1_ones():
    return _kcftracker._Matx_short_3_1_ones()
_Matx_short_3_1_ones = _kcftracker._Matx_short_3_1_ones

def _Matx_short_3_1_eye():
    return _kcftracker._Matx_short_3_1_eye()
_Matx_short_3_1_eye = _kcftracker._Matx_short_3_1_eye

def _Matx_short_3_1_randu(a, b):
    return _kcftracker._Matx_short_3_1_randu(a, b)
_Matx_short_3_1_randu = _kcftracker._Matx_short_3_1_randu

def _Matx_short_3_1_randn(a, b):
    return _kcftracker._Matx_short_3_1_randn(a, b)
_Matx_short_3_1_randn = _kcftracker._Matx_short_3_1_randn


Matx31s = _Matx_short_3_1

class _Vec_short_3(_Matx_short_3_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_short_3_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_short_3, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_short_3_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_short_3, name)
    __repr__ = _swig_repr
    channels = _kcftracker._Vec_short_3_channels
    __swig_getmethods__["all"] = lambda x: _kcftracker._Vec_short_3_all
    if _newclass:
        all = staticmethod(_kcftracker._Vec_short_3_all)

    def mul(self, v):
        return _kcftracker._Vec_short_3_mul(self, v)

    def __call__(self, i):
        return _kcftracker._Vec_short_3___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Vec_short_3(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _kcftracker._Vec_short_3___str__(self)
    __swig_destroy__ = _kcftracker.delete__Vec_short_3
    __del__ = lambda self: None
_Vec_short_3_swigregister = _kcftracker._Vec_short_3_swigregister
_Vec_short_3_swigregister(_Vec_short_3)

def _Vec_short_3_all(alpha):
    return _kcftracker._Vec_short_3_all(alpha)
_Vec_short_3_all = _kcftracker._Vec_short_3_all

class _DataType_Vec_short_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_short_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_short_3, name)
    __repr__ = _swig_repr
    generic_type = _kcftracker._DataType_Vec_short_3_generic_type
    channels = _kcftracker._DataType_Vec_short_3_channels
    fmt = _kcftracker._DataType_Vec_short_3_fmt

    def __init__(self):
        this = _kcftracker.new__DataType_Vec_short_3()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete__DataType_Vec_short_3
    __del__ = lambda self: None
_DataType_Vec_short_3_swigregister = _kcftracker._DataType_Vec_short_3_swigregister
_DataType_Vec_short_3_swigregister(_DataType_Vec_short_3)


Vec3s = _Vec_short_3
DataType_Vec3s = _DataType_Vec_short_3

class _Matx_short_4_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_short_4_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_short_4_1, name)
    __repr__ = _swig_repr
    rows = _kcftracker._Matx_short_4_1_rows
    cols = _kcftracker._Matx_short_4_1_cols
    channels = _kcftracker._Matx_short_4_1_channels
    shortdim = _kcftracker._Matx_short_4_1_shortdim
    __swig_getmethods__["all"] = lambda x: _kcftracker._Matx_short_4_1_all
    if _newclass:
        all = staticmethod(_kcftracker._Matx_short_4_1_all)
    __swig_getmethods__["zeros"] = lambda x: _kcftracker._Matx_short_4_1_zeros
    if _newclass:
        zeros = staticmethod(_kcftracker._Matx_short_4_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _kcftracker._Matx_short_4_1_ones
    if _newclass:
        ones = staticmethod(_kcftracker._Matx_short_4_1_ones)
    __swig_getmethods__["eye"] = lambda x: _kcftracker._Matx_short_4_1_eye
    if _newclass:
        eye = staticmethod(_kcftracker._Matx_short_4_1_eye)
    __swig_getmethods__["randu"] = lambda x: _kcftracker._Matx_short_4_1_randu
    if _newclass:
        randu = staticmethod(_kcftracker._Matx_short_4_1_randu)
    __swig_getmethods__["randn"] = lambda x: _kcftracker._Matx_short_4_1_randn
    if _newclass:
        randn = staticmethod(_kcftracker._Matx_short_4_1_randn)

    def dot(self, v):
        return _kcftracker._Matx_short_4_1_dot(self, v)

    def ddot(self, v):
        return _kcftracker._Matx_short_4_1_ddot(self, v)

    def t(self):
        return _kcftracker._Matx_short_4_1_t(self)

    def mul(self, a):
        return _kcftracker._Matx_short_4_1_mul(self, a)

    def div(self, a):
        return _kcftracker._Matx_short_4_1_div(self, a)

    def __call__(self, i, j):
        return _kcftracker._Matx_short_4_1___call__(self, i, j)
    __swig_setmethods__["val"] = _kcftracker._Matx_short_4_1_val_set
    __swig_getmethods__["val"] = _kcftracker._Matx_short_4_1_val_get
    if _newclass:
        val = _swig_property(_kcftracker._Matx_short_4_1_val_get, _kcftracker._Matx_short_4_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Matx_short_4_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _kcftracker._Matx_short_4_1___str__(self)
    __swig_destroy__ = _kcftracker.delete__Matx_short_4_1
    __del__ = lambda self: None
_Matx_short_4_1_swigregister = _kcftracker._Matx_short_4_1_swigregister
_Matx_short_4_1_swigregister(_Matx_short_4_1)

def _Matx_short_4_1_all(alpha):
    return _kcftracker._Matx_short_4_1_all(alpha)
_Matx_short_4_1_all = _kcftracker._Matx_short_4_1_all

def _Matx_short_4_1_zeros():
    return _kcftracker._Matx_short_4_1_zeros()
_Matx_short_4_1_zeros = _kcftracker._Matx_short_4_1_zeros

def _Matx_short_4_1_ones():
    return _kcftracker._Matx_short_4_1_ones()
_Matx_short_4_1_ones = _kcftracker._Matx_short_4_1_ones

def _Matx_short_4_1_eye():
    return _kcftracker._Matx_short_4_1_eye()
_Matx_short_4_1_eye = _kcftracker._Matx_short_4_1_eye

def _Matx_short_4_1_randu(a, b):
    return _kcftracker._Matx_short_4_1_randu(a, b)
_Matx_short_4_1_randu = _kcftracker._Matx_short_4_1_randu

def _Matx_short_4_1_randn(a, b):
    return _kcftracker._Matx_short_4_1_randn(a, b)
_Matx_short_4_1_randn = _kcftracker._Matx_short_4_1_randn


Matx41s = _Matx_short_4_1

class _Vec_short_4(_Matx_short_4_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_short_4_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_short_4, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_short_4_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_short_4, name)
    __repr__ = _swig_repr
    channels = _kcftracker._Vec_short_4_channels
    __swig_getmethods__["all"] = lambda x: _kcftracker._Vec_short_4_all
    if _newclass:
        all = staticmethod(_kcftracker._Vec_short_4_all)

    def mul(self, v):
        return _kcftracker._Vec_short_4_mul(self, v)

    def __call__(self, i):
        return _kcftracker._Vec_short_4___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Vec_short_4(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _kcftracker._Vec_short_4___str__(self)
    __swig_destroy__ = _kcftracker.delete__Vec_short_4
    __del__ = lambda self: None
_Vec_short_4_swigregister = _kcftracker._Vec_short_4_swigregister
_Vec_short_4_swigregister(_Vec_short_4)

def _Vec_short_4_all(alpha):
    return _kcftracker._Vec_short_4_all(alpha)
_Vec_short_4_all = _kcftracker._Vec_short_4_all

class _DataType_Vec_short_4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_short_4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_short_4, name)
    __repr__ = _swig_repr
    generic_type = _kcftracker._DataType_Vec_short_4_generic_type
    channels = _kcftracker._DataType_Vec_short_4_channels
    fmt = _kcftracker._DataType_Vec_short_4_fmt

    def __init__(self):
        this = _kcftracker.new__DataType_Vec_short_4()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete__DataType_Vec_short_4
    __del__ = lambda self: None
_DataType_Vec_short_4_swigregister = _kcftracker._DataType_Vec_short_4_swigregister
_DataType_Vec_short_4_swigregister(_DataType_Vec_short_4)


Vec4s = _Vec_short_4
DataType_Vec4s = _DataType_Vec_short_4

class _cv_numpy_sizeof_ushort(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cv_numpy_sizeof_ushort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cv_numpy_sizeof_ushort, name)
    __repr__ = _swig_repr
    value = _kcftracker._cv_numpy_sizeof_ushort_value

    def __init__(self):
        this = _kcftracker.new__cv_numpy_sizeof_ushort()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete__cv_numpy_sizeof_ushort
    __del__ = lambda self: None
_cv_numpy_sizeof_ushort_swigregister = _kcftracker._cv_numpy_sizeof_ushort_swigregister
_cv_numpy_sizeof_ushort_swigregister(_cv_numpy_sizeof_ushort)


if _cv_numpy_sizeof_ushort.value == 1:
    _cv_numpy_typestr_map["ushort"] = "|" +"u" + "1"
else:
    _cv_numpy_typestr_map["ushort"] = _cv_numpy_endianess  +"u" + str(_cv_numpy_sizeof_ushort.value)

class _ushortArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _ushortArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _ushortArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _kcftracker._ushortArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _kcftracker._ushortArray___nonzero__(self)

    def __bool__(self):
        return _kcftracker._ushortArray___bool__(self)

    def __len__(self):
        return _kcftracker._ushortArray___len__(self)

    def __getslice__(self, i, j):
        return _kcftracker._ushortArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _kcftracker._ushortArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _kcftracker._ushortArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _kcftracker._ushortArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _kcftracker._ushortArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _kcftracker._ushortArray___setitem__(self, *args)

    def pop(self):
        return _kcftracker._ushortArray_pop(self)

    def append(self, x):
        return _kcftracker._ushortArray_append(self, x)

    def empty(self):
        return _kcftracker._ushortArray_empty(self)

    def size(self):
        return _kcftracker._ushortArray_size(self)

    def swap(self, v):
        return _kcftracker._ushortArray_swap(self, v)

    def begin(self):
        return _kcftracker._ushortArray_begin(self)

    def end(self):
        return _kcftracker._ushortArray_end(self)

    def rbegin(self):
        return _kcftracker._ushortArray_rbegin(self)

    def rend(self):
        return _kcftracker._ushortArray_rend(self)

    def clear(self):
        return _kcftracker._ushortArray_clear(self)

    def get_allocator(self):
        return _kcftracker._ushortArray_get_allocator(self)

    def pop_back(self):
        return _kcftracker._ushortArray_pop_back(self)

    def erase(self, *args):
        return _kcftracker._ushortArray_erase(self, *args)

    def __init__(self, *args):
        this = _kcftracker.new__ushortArray(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _kcftracker._ushortArray_push_back(self, x)

    def front(self):
        return _kcftracker._ushortArray_front(self)

    def back(self):
        return _kcftracker._ushortArray_back(self)

    def assign(self, n, x):
        return _kcftracker._ushortArray_assign(self, n, x)

    def resize(self, *args):
        return _kcftracker._ushortArray_resize(self, *args)

    def insert(self, *args):
        return _kcftracker._ushortArray_insert(self, *args)

    def reserve(self, n):
        return _kcftracker._ushortArray_reserve(self, n)

    def capacity(self):
        return _kcftracker._ushortArray_capacity(self)
    __swig_destroy__ = _kcftracker.delete__ushortArray
    __del__ = lambda self: None
_ushortArray_swigregister = _kcftracker._ushortArray_swigregister
_ushortArray_swigregister(_ushortArray)


_array_map["ushort"] = _ushortArray

class _Matx_ushort_2_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_ushort_2_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_ushort_2_1, name)
    __repr__ = _swig_repr
    rows = _kcftracker._Matx_ushort_2_1_rows
    cols = _kcftracker._Matx_ushort_2_1_cols
    channels = _kcftracker._Matx_ushort_2_1_channels
    shortdim = _kcftracker._Matx_ushort_2_1_shortdim
    __swig_getmethods__["all"] = lambda x: _kcftracker._Matx_ushort_2_1_all
    if _newclass:
        all = staticmethod(_kcftracker._Matx_ushort_2_1_all)
    __swig_getmethods__["zeros"] = lambda x: _kcftracker._Matx_ushort_2_1_zeros
    if _newclass:
        zeros = staticmethod(_kcftracker._Matx_ushort_2_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _kcftracker._Matx_ushort_2_1_ones
    if _newclass:
        ones = staticmethod(_kcftracker._Matx_ushort_2_1_ones)
    __swig_getmethods__["eye"] = lambda x: _kcftracker._Matx_ushort_2_1_eye
    if _newclass:
        eye = staticmethod(_kcftracker._Matx_ushort_2_1_eye)
    __swig_getmethods__["randu"] = lambda x: _kcftracker._Matx_ushort_2_1_randu
    if _newclass:
        randu = staticmethod(_kcftracker._Matx_ushort_2_1_randu)
    __swig_getmethods__["randn"] = lambda x: _kcftracker._Matx_ushort_2_1_randn
    if _newclass:
        randn = staticmethod(_kcftracker._Matx_ushort_2_1_randn)

    def dot(self, v):
        return _kcftracker._Matx_ushort_2_1_dot(self, v)

    def ddot(self, v):
        return _kcftracker._Matx_ushort_2_1_ddot(self, v)

    def t(self):
        return _kcftracker._Matx_ushort_2_1_t(self)

    def mul(self, a):
        return _kcftracker._Matx_ushort_2_1_mul(self, a)

    def div(self, a):
        return _kcftracker._Matx_ushort_2_1_div(self, a)

    def __call__(self, i, j):
        return _kcftracker._Matx_ushort_2_1___call__(self, i, j)
    __swig_setmethods__["val"] = _kcftracker._Matx_ushort_2_1_val_set
    __swig_getmethods__["val"] = _kcftracker._Matx_ushort_2_1_val_get
    if _newclass:
        val = _swig_property(_kcftracker._Matx_ushort_2_1_val_get, _kcftracker._Matx_ushort_2_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Matx_ushort_2_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _kcftracker._Matx_ushort_2_1___str__(self)
    __swig_destroy__ = _kcftracker.delete__Matx_ushort_2_1
    __del__ = lambda self: None
_Matx_ushort_2_1_swigregister = _kcftracker._Matx_ushort_2_1_swigregister
_Matx_ushort_2_1_swigregister(_Matx_ushort_2_1)

def _Matx_ushort_2_1_all(alpha):
    return _kcftracker._Matx_ushort_2_1_all(alpha)
_Matx_ushort_2_1_all = _kcftracker._Matx_ushort_2_1_all

def _Matx_ushort_2_1_zeros():
    return _kcftracker._Matx_ushort_2_1_zeros()
_Matx_ushort_2_1_zeros = _kcftracker._Matx_ushort_2_1_zeros

def _Matx_ushort_2_1_ones():
    return _kcftracker._Matx_ushort_2_1_ones()
_Matx_ushort_2_1_ones = _kcftracker._Matx_ushort_2_1_ones

def _Matx_ushort_2_1_eye():
    return _kcftracker._Matx_ushort_2_1_eye()
_Matx_ushort_2_1_eye = _kcftracker._Matx_ushort_2_1_eye

def _Matx_ushort_2_1_randu(a, b):
    return _kcftracker._Matx_ushort_2_1_randu(a, b)
_Matx_ushort_2_1_randu = _kcftracker._Matx_ushort_2_1_randu

def _Matx_ushort_2_1_randn(a, b):
    return _kcftracker._Matx_ushort_2_1_randn(a, b)
_Matx_ushort_2_1_randn = _kcftracker._Matx_ushort_2_1_randn


Matx21w = _Matx_ushort_2_1

class _Vec_ushort_2(_Matx_ushort_2_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_ushort_2_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_ushort_2, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_ushort_2_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_ushort_2, name)
    __repr__ = _swig_repr
    channels = _kcftracker._Vec_ushort_2_channels
    __swig_getmethods__["all"] = lambda x: _kcftracker._Vec_ushort_2_all
    if _newclass:
        all = staticmethod(_kcftracker._Vec_ushort_2_all)

    def mul(self, v):
        return _kcftracker._Vec_ushort_2_mul(self, v)

    def __call__(self, i):
        return _kcftracker._Vec_ushort_2___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Vec_ushort_2(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _kcftracker._Vec_ushort_2___str__(self)
    __swig_destroy__ = _kcftracker.delete__Vec_ushort_2
    __del__ = lambda self: None
_Vec_ushort_2_swigregister = _kcftracker._Vec_ushort_2_swigregister
_Vec_ushort_2_swigregister(_Vec_ushort_2)

def _Vec_ushort_2_all(alpha):
    return _kcftracker._Vec_ushort_2_all(alpha)
_Vec_ushort_2_all = _kcftracker._Vec_ushort_2_all

class _DataType_Vec_ushort_2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_ushort_2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_ushort_2, name)
    __repr__ = _swig_repr
    generic_type = _kcftracker._DataType_Vec_ushort_2_generic_type
    channels = _kcftracker._DataType_Vec_ushort_2_channels
    fmt = _kcftracker._DataType_Vec_ushort_2_fmt

    def __init__(self):
        this = _kcftracker.new__DataType_Vec_ushort_2()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete__DataType_Vec_ushort_2
    __del__ = lambda self: None
_DataType_Vec_ushort_2_swigregister = _kcftracker._DataType_Vec_ushort_2_swigregister
_DataType_Vec_ushort_2_swigregister(_DataType_Vec_ushort_2)


Vec2w = _Vec_ushort_2
DataType_Vec2w = _DataType_Vec_ushort_2

class _Matx_ushort_3_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_ushort_3_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_ushort_3_1, name)
    __repr__ = _swig_repr
    rows = _kcftracker._Matx_ushort_3_1_rows
    cols = _kcftracker._Matx_ushort_3_1_cols
    channels = _kcftracker._Matx_ushort_3_1_channels
    shortdim = _kcftracker._Matx_ushort_3_1_shortdim
    __swig_getmethods__["all"] = lambda x: _kcftracker._Matx_ushort_3_1_all
    if _newclass:
        all = staticmethod(_kcftracker._Matx_ushort_3_1_all)
    __swig_getmethods__["zeros"] = lambda x: _kcftracker._Matx_ushort_3_1_zeros
    if _newclass:
        zeros = staticmethod(_kcftracker._Matx_ushort_3_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _kcftracker._Matx_ushort_3_1_ones
    if _newclass:
        ones = staticmethod(_kcftracker._Matx_ushort_3_1_ones)
    __swig_getmethods__["eye"] = lambda x: _kcftracker._Matx_ushort_3_1_eye
    if _newclass:
        eye = staticmethod(_kcftracker._Matx_ushort_3_1_eye)
    __swig_getmethods__["randu"] = lambda x: _kcftracker._Matx_ushort_3_1_randu
    if _newclass:
        randu = staticmethod(_kcftracker._Matx_ushort_3_1_randu)
    __swig_getmethods__["randn"] = lambda x: _kcftracker._Matx_ushort_3_1_randn
    if _newclass:
        randn = staticmethod(_kcftracker._Matx_ushort_3_1_randn)

    def dot(self, v):
        return _kcftracker._Matx_ushort_3_1_dot(self, v)

    def ddot(self, v):
        return _kcftracker._Matx_ushort_3_1_ddot(self, v)

    def t(self):
        return _kcftracker._Matx_ushort_3_1_t(self)

    def mul(self, a):
        return _kcftracker._Matx_ushort_3_1_mul(self, a)

    def div(self, a):
        return _kcftracker._Matx_ushort_3_1_div(self, a)

    def __call__(self, i, j):
        return _kcftracker._Matx_ushort_3_1___call__(self, i, j)
    __swig_setmethods__["val"] = _kcftracker._Matx_ushort_3_1_val_set
    __swig_getmethods__["val"] = _kcftracker._Matx_ushort_3_1_val_get
    if _newclass:
        val = _swig_property(_kcftracker._Matx_ushort_3_1_val_get, _kcftracker._Matx_ushort_3_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Matx_ushort_3_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _kcftracker._Matx_ushort_3_1___str__(self)
    __swig_destroy__ = _kcftracker.delete__Matx_ushort_3_1
    __del__ = lambda self: None
_Matx_ushort_3_1_swigregister = _kcftracker._Matx_ushort_3_1_swigregister
_Matx_ushort_3_1_swigregister(_Matx_ushort_3_1)

def _Matx_ushort_3_1_all(alpha):
    return _kcftracker._Matx_ushort_3_1_all(alpha)
_Matx_ushort_3_1_all = _kcftracker._Matx_ushort_3_1_all

def _Matx_ushort_3_1_zeros():
    return _kcftracker._Matx_ushort_3_1_zeros()
_Matx_ushort_3_1_zeros = _kcftracker._Matx_ushort_3_1_zeros

def _Matx_ushort_3_1_ones():
    return _kcftracker._Matx_ushort_3_1_ones()
_Matx_ushort_3_1_ones = _kcftracker._Matx_ushort_3_1_ones

def _Matx_ushort_3_1_eye():
    return _kcftracker._Matx_ushort_3_1_eye()
_Matx_ushort_3_1_eye = _kcftracker._Matx_ushort_3_1_eye

def _Matx_ushort_3_1_randu(a, b):
    return _kcftracker._Matx_ushort_3_1_randu(a, b)
_Matx_ushort_3_1_randu = _kcftracker._Matx_ushort_3_1_randu

def _Matx_ushort_3_1_randn(a, b):
    return _kcftracker._Matx_ushort_3_1_randn(a, b)
_Matx_ushort_3_1_randn = _kcftracker._Matx_ushort_3_1_randn


Matx31w = _Matx_ushort_3_1

class _Vec_ushort_3(_Matx_ushort_3_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_ushort_3_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_ushort_3, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_ushort_3_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_ushort_3, name)
    __repr__ = _swig_repr
    channels = _kcftracker._Vec_ushort_3_channels
    __swig_getmethods__["all"] = lambda x: _kcftracker._Vec_ushort_3_all
    if _newclass:
        all = staticmethod(_kcftracker._Vec_ushort_3_all)

    def mul(self, v):
        return _kcftracker._Vec_ushort_3_mul(self, v)

    def __call__(self, i):
        return _kcftracker._Vec_ushort_3___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Vec_ushort_3(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _kcftracker._Vec_ushort_3___str__(self)
    __swig_destroy__ = _kcftracker.delete__Vec_ushort_3
    __del__ = lambda self: None
_Vec_ushort_3_swigregister = _kcftracker._Vec_ushort_3_swigregister
_Vec_ushort_3_swigregister(_Vec_ushort_3)

def _Vec_ushort_3_all(alpha):
    return _kcftracker._Vec_ushort_3_all(alpha)
_Vec_ushort_3_all = _kcftracker._Vec_ushort_3_all

class _DataType_Vec_ushort_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_ushort_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_ushort_3, name)
    __repr__ = _swig_repr
    generic_type = _kcftracker._DataType_Vec_ushort_3_generic_type
    channels = _kcftracker._DataType_Vec_ushort_3_channels
    fmt = _kcftracker._DataType_Vec_ushort_3_fmt

    def __init__(self):
        this = _kcftracker.new__DataType_Vec_ushort_3()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete__DataType_Vec_ushort_3
    __del__ = lambda self: None
_DataType_Vec_ushort_3_swigregister = _kcftracker._DataType_Vec_ushort_3_swigregister
_DataType_Vec_ushort_3_swigregister(_DataType_Vec_ushort_3)


Vec3w = _Vec_ushort_3
DataType_Vec3w = _DataType_Vec_ushort_3

class _Matx_ushort_4_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_ushort_4_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_ushort_4_1, name)
    __repr__ = _swig_repr
    rows = _kcftracker._Matx_ushort_4_1_rows
    cols = _kcftracker._Matx_ushort_4_1_cols
    channels = _kcftracker._Matx_ushort_4_1_channels
    shortdim = _kcftracker._Matx_ushort_4_1_shortdim
    __swig_getmethods__["all"] = lambda x: _kcftracker._Matx_ushort_4_1_all
    if _newclass:
        all = staticmethod(_kcftracker._Matx_ushort_4_1_all)
    __swig_getmethods__["zeros"] = lambda x: _kcftracker._Matx_ushort_4_1_zeros
    if _newclass:
        zeros = staticmethod(_kcftracker._Matx_ushort_4_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _kcftracker._Matx_ushort_4_1_ones
    if _newclass:
        ones = staticmethod(_kcftracker._Matx_ushort_4_1_ones)
    __swig_getmethods__["eye"] = lambda x: _kcftracker._Matx_ushort_4_1_eye
    if _newclass:
        eye = staticmethod(_kcftracker._Matx_ushort_4_1_eye)
    __swig_getmethods__["randu"] = lambda x: _kcftracker._Matx_ushort_4_1_randu
    if _newclass:
        randu = staticmethod(_kcftracker._Matx_ushort_4_1_randu)
    __swig_getmethods__["randn"] = lambda x: _kcftracker._Matx_ushort_4_1_randn
    if _newclass:
        randn = staticmethod(_kcftracker._Matx_ushort_4_1_randn)

    def dot(self, v):
        return _kcftracker._Matx_ushort_4_1_dot(self, v)

    def ddot(self, v):
        return _kcftracker._Matx_ushort_4_1_ddot(self, v)

    def t(self):
        return _kcftracker._Matx_ushort_4_1_t(self)

    def mul(self, a):
        return _kcftracker._Matx_ushort_4_1_mul(self, a)

    def div(self, a):
        return _kcftracker._Matx_ushort_4_1_div(self, a)

    def __call__(self, i, j):
        return _kcftracker._Matx_ushort_4_1___call__(self, i, j)
    __swig_setmethods__["val"] = _kcftracker._Matx_ushort_4_1_val_set
    __swig_getmethods__["val"] = _kcftracker._Matx_ushort_4_1_val_get
    if _newclass:
        val = _swig_property(_kcftracker._Matx_ushort_4_1_val_get, _kcftracker._Matx_ushort_4_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Matx_ushort_4_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _kcftracker._Matx_ushort_4_1___str__(self)
    __swig_destroy__ = _kcftracker.delete__Matx_ushort_4_1
    __del__ = lambda self: None
_Matx_ushort_4_1_swigregister = _kcftracker._Matx_ushort_4_1_swigregister
_Matx_ushort_4_1_swigregister(_Matx_ushort_4_1)

def _Matx_ushort_4_1_all(alpha):
    return _kcftracker._Matx_ushort_4_1_all(alpha)
_Matx_ushort_4_1_all = _kcftracker._Matx_ushort_4_1_all

def _Matx_ushort_4_1_zeros():
    return _kcftracker._Matx_ushort_4_1_zeros()
_Matx_ushort_4_1_zeros = _kcftracker._Matx_ushort_4_1_zeros

def _Matx_ushort_4_1_ones():
    return _kcftracker._Matx_ushort_4_1_ones()
_Matx_ushort_4_1_ones = _kcftracker._Matx_ushort_4_1_ones

def _Matx_ushort_4_1_eye():
    return _kcftracker._Matx_ushort_4_1_eye()
_Matx_ushort_4_1_eye = _kcftracker._Matx_ushort_4_1_eye

def _Matx_ushort_4_1_randu(a, b):
    return _kcftracker._Matx_ushort_4_1_randu(a, b)
_Matx_ushort_4_1_randu = _kcftracker._Matx_ushort_4_1_randu

def _Matx_ushort_4_1_randn(a, b):
    return _kcftracker._Matx_ushort_4_1_randn(a, b)
_Matx_ushort_4_1_randn = _kcftracker._Matx_ushort_4_1_randn


Matx41w = _Matx_ushort_4_1

class _Vec_ushort_4(_Matx_ushort_4_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_ushort_4_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_ushort_4, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_ushort_4_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_ushort_4, name)
    __repr__ = _swig_repr
    channels = _kcftracker._Vec_ushort_4_channels
    __swig_getmethods__["all"] = lambda x: _kcftracker._Vec_ushort_4_all
    if _newclass:
        all = staticmethod(_kcftracker._Vec_ushort_4_all)

    def mul(self, v):
        return _kcftracker._Vec_ushort_4_mul(self, v)

    def __call__(self, i):
        return _kcftracker._Vec_ushort_4___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Vec_ushort_4(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _kcftracker._Vec_ushort_4___str__(self)
    __swig_destroy__ = _kcftracker.delete__Vec_ushort_4
    __del__ = lambda self: None
_Vec_ushort_4_swigregister = _kcftracker._Vec_ushort_4_swigregister
_Vec_ushort_4_swigregister(_Vec_ushort_4)

def _Vec_ushort_4_all(alpha):
    return _kcftracker._Vec_ushort_4_all(alpha)
_Vec_ushort_4_all = _kcftracker._Vec_ushort_4_all

class _DataType_Vec_ushort_4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_ushort_4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_ushort_4, name)
    __repr__ = _swig_repr
    generic_type = _kcftracker._DataType_Vec_ushort_4_generic_type
    channels = _kcftracker._DataType_Vec_ushort_4_channels
    fmt = _kcftracker._DataType_Vec_ushort_4_fmt

    def __init__(self):
        this = _kcftracker.new__DataType_Vec_ushort_4()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete__DataType_Vec_ushort_4
    __del__ = lambda self: None
_DataType_Vec_ushort_4_swigregister = _kcftracker._DataType_Vec_ushort_4_swigregister
_DataType_Vec_ushort_4_swigregister(_DataType_Vec_ushort_4)


Vec4w = _Vec_ushort_4
DataType_Vec4w = _DataType_Vec_ushort_4

class _cv_numpy_sizeof_int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cv_numpy_sizeof_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cv_numpy_sizeof_int, name)
    __repr__ = _swig_repr
    value = _kcftracker._cv_numpy_sizeof_int_value

    def __init__(self):
        this = _kcftracker.new__cv_numpy_sizeof_int()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete__cv_numpy_sizeof_int
    __del__ = lambda self: None
_cv_numpy_sizeof_int_swigregister = _kcftracker._cv_numpy_sizeof_int_swigregister
_cv_numpy_sizeof_int_swigregister(_cv_numpy_sizeof_int)


if _cv_numpy_sizeof_int.value == 1:
    _cv_numpy_typestr_map["int"] = "|" +"i" + "1"
else:
    _cv_numpy_typestr_map["int"] = _cv_numpy_endianess  +"i" + str(_cv_numpy_sizeof_int.value)

class _intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _intArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _kcftracker._intArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _kcftracker._intArray___nonzero__(self)

    def __bool__(self):
        return _kcftracker._intArray___bool__(self)

    def __len__(self):
        return _kcftracker._intArray___len__(self)

    def __getslice__(self, i, j):
        return _kcftracker._intArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _kcftracker._intArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _kcftracker._intArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _kcftracker._intArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _kcftracker._intArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _kcftracker._intArray___setitem__(self, *args)

    def pop(self):
        return _kcftracker._intArray_pop(self)

    def append(self, x):
        return _kcftracker._intArray_append(self, x)

    def empty(self):
        return _kcftracker._intArray_empty(self)

    def size(self):
        return _kcftracker._intArray_size(self)

    def swap(self, v):
        return _kcftracker._intArray_swap(self, v)

    def begin(self):
        return _kcftracker._intArray_begin(self)

    def end(self):
        return _kcftracker._intArray_end(self)

    def rbegin(self):
        return _kcftracker._intArray_rbegin(self)

    def rend(self):
        return _kcftracker._intArray_rend(self)

    def clear(self):
        return _kcftracker._intArray_clear(self)

    def get_allocator(self):
        return _kcftracker._intArray_get_allocator(self)

    def pop_back(self):
        return _kcftracker._intArray_pop_back(self)

    def erase(self, *args):
        return _kcftracker._intArray_erase(self, *args)

    def __init__(self, *args):
        this = _kcftracker.new__intArray(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _kcftracker._intArray_push_back(self, x)

    def front(self):
        return _kcftracker._intArray_front(self)

    def back(self):
        return _kcftracker._intArray_back(self)

    def assign(self, n, x):
        return _kcftracker._intArray_assign(self, n, x)

    def resize(self, *args):
        return _kcftracker._intArray_resize(self, *args)

    def insert(self, *args):
        return _kcftracker._intArray_insert(self, *args)

    def reserve(self, n):
        return _kcftracker._intArray_reserve(self, n)

    def capacity(self):
        return _kcftracker._intArray_capacity(self)
    __swig_destroy__ = _kcftracker.delete__intArray
    __del__ = lambda self: None
_intArray_swigregister = _kcftracker._intArray_swigregister
_intArray_swigregister(_intArray)


_array_map["int"] = _intArray

class _Matx_int_2_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_int_2_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_int_2_1, name)
    __repr__ = _swig_repr
    rows = _kcftracker._Matx_int_2_1_rows
    cols = _kcftracker._Matx_int_2_1_cols
    channels = _kcftracker._Matx_int_2_1_channels
    shortdim = _kcftracker._Matx_int_2_1_shortdim
    __swig_getmethods__["all"] = lambda x: _kcftracker._Matx_int_2_1_all
    if _newclass:
        all = staticmethod(_kcftracker._Matx_int_2_1_all)
    __swig_getmethods__["zeros"] = lambda x: _kcftracker._Matx_int_2_1_zeros
    if _newclass:
        zeros = staticmethod(_kcftracker._Matx_int_2_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _kcftracker._Matx_int_2_1_ones
    if _newclass:
        ones = staticmethod(_kcftracker._Matx_int_2_1_ones)
    __swig_getmethods__["eye"] = lambda x: _kcftracker._Matx_int_2_1_eye
    if _newclass:
        eye = staticmethod(_kcftracker._Matx_int_2_1_eye)
    __swig_getmethods__["randu"] = lambda x: _kcftracker._Matx_int_2_1_randu
    if _newclass:
        randu = staticmethod(_kcftracker._Matx_int_2_1_randu)
    __swig_getmethods__["randn"] = lambda x: _kcftracker._Matx_int_2_1_randn
    if _newclass:
        randn = staticmethod(_kcftracker._Matx_int_2_1_randn)

    def dot(self, v):
        return _kcftracker._Matx_int_2_1_dot(self, v)

    def ddot(self, v):
        return _kcftracker._Matx_int_2_1_ddot(self, v)

    def t(self):
        return _kcftracker._Matx_int_2_1_t(self)

    def mul(self, a):
        return _kcftracker._Matx_int_2_1_mul(self, a)

    def div(self, a):
        return _kcftracker._Matx_int_2_1_div(self, a)

    def __call__(self, i, j):
        return _kcftracker._Matx_int_2_1___call__(self, i, j)
    __swig_setmethods__["val"] = _kcftracker._Matx_int_2_1_val_set
    __swig_getmethods__["val"] = _kcftracker._Matx_int_2_1_val_get
    if _newclass:
        val = _swig_property(_kcftracker._Matx_int_2_1_val_get, _kcftracker._Matx_int_2_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Matx_int_2_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _kcftracker._Matx_int_2_1___str__(self)
    __swig_destroy__ = _kcftracker.delete__Matx_int_2_1
    __del__ = lambda self: None
_Matx_int_2_1_swigregister = _kcftracker._Matx_int_2_1_swigregister
_Matx_int_2_1_swigregister(_Matx_int_2_1)

def _Matx_int_2_1_all(alpha):
    return _kcftracker._Matx_int_2_1_all(alpha)
_Matx_int_2_1_all = _kcftracker._Matx_int_2_1_all

def _Matx_int_2_1_zeros():
    return _kcftracker._Matx_int_2_1_zeros()
_Matx_int_2_1_zeros = _kcftracker._Matx_int_2_1_zeros

def _Matx_int_2_1_ones():
    return _kcftracker._Matx_int_2_1_ones()
_Matx_int_2_1_ones = _kcftracker._Matx_int_2_1_ones

def _Matx_int_2_1_eye():
    return _kcftracker._Matx_int_2_1_eye()
_Matx_int_2_1_eye = _kcftracker._Matx_int_2_1_eye

def _Matx_int_2_1_randu(a, b):
    return _kcftracker._Matx_int_2_1_randu(a, b)
_Matx_int_2_1_randu = _kcftracker._Matx_int_2_1_randu

def _Matx_int_2_1_randn(a, b):
    return _kcftracker._Matx_int_2_1_randn(a, b)
_Matx_int_2_1_randn = _kcftracker._Matx_int_2_1_randn


Matx21i = _Matx_int_2_1

class _Vec_int_2(_Matx_int_2_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_int_2_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_int_2, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_int_2_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_int_2, name)
    __repr__ = _swig_repr
    channels = _kcftracker._Vec_int_2_channels
    __swig_getmethods__["all"] = lambda x: _kcftracker._Vec_int_2_all
    if _newclass:
        all = staticmethod(_kcftracker._Vec_int_2_all)

    def mul(self, v):
        return _kcftracker._Vec_int_2_mul(self, v)

    def __call__(self, i):
        return _kcftracker._Vec_int_2___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Vec_int_2(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _kcftracker._Vec_int_2___str__(self)
    __swig_destroy__ = _kcftracker.delete__Vec_int_2
    __del__ = lambda self: None
_Vec_int_2_swigregister = _kcftracker._Vec_int_2_swigregister
_Vec_int_2_swigregister(_Vec_int_2)

def _Vec_int_2_all(alpha):
    return _kcftracker._Vec_int_2_all(alpha)
_Vec_int_2_all = _kcftracker._Vec_int_2_all

class _DataType_Vec_int_2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_int_2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_int_2, name)
    __repr__ = _swig_repr
    generic_type = _kcftracker._DataType_Vec_int_2_generic_type
    channels = _kcftracker._DataType_Vec_int_2_channels
    fmt = _kcftracker._DataType_Vec_int_2_fmt

    def __init__(self):
        this = _kcftracker.new__DataType_Vec_int_2()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete__DataType_Vec_int_2
    __del__ = lambda self: None
_DataType_Vec_int_2_swigregister = _kcftracker._DataType_Vec_int_2_swigregister
_DataType_Vec_int_2_swigregister(_DataType_Vec_int_2)


Vec2i = _Vec_int_2
DataType_Vec2i = _DataType_Vec_int_2

class _Matx_int_3_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_int_3_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_int_3_1, name)
    __repr__ = _swig_repr
    rows = _kcftracker._Matx_int_3_1_rows
    cols = _kcftracker._Matx_int_3_1_cols
    channels = _kcftracker._Matx_int_3_1_channels
    shortdim = _kcftracker._Matx_int_3_1_shortdim
    __swig_getmethods__["all"] = lambda x: _kcftracker._Matx_int_3_1_all
    if _newclass:
        all = staticmethod(_kcftracker._Matx_int_3_1_all)
    __swig_getmethods__["zeros"] = lambda x: _kcftracker._Matx_int_3_1_zeros
    if _newclass:
        zeros = staticmethod(_kcftracker._Matx_int_3_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _kcftracker._Matx_int_3_1_ones
    if _newclass:
        ones = staticmethod(_kcftracker._Matx_int_3_1_ones)
    __swig_getmethods__["eye"] = lambda x: _kcftracker._Matx_int_3_1_eye
    if _newclass:
        eye = staticmethod(_kcftracker._Matx_int_3_1_eye)
    __swig_getmethods__["randu"] = lambda x: _kcftracker._Matx_int_3_1_randu
    if _newclass:
        randu = staticmethod(_kcftracker._Matx_int_3_1_randu)
    __swig_getmethods__["randn"] = lambda x: _kcftracker._Matx_int_3_1_randn
    if _newclass:
        randn = staticmethod(_kcftracker._Matx_int_3_1_randn)

    def dot(self, v):
        return _kcftracker._Matx_int_3_1_dot(self, v)

    def ddot(self, v):
        return _kcftracker._Matx_int_3_1_ddot(self, v)

    def t(self):
        return _kcftracker._Matx_int_3_1_t(self)

    def mul(self, a):
        return _kcftracker._Matx_int_3_1_mul(self, a)

    def div(self, a):
        return _kcftracker._Matx_int_3_1_div(self, a)

    def __call__(self, i, j):
        return _kcftracker._Matx_int_3_1___call__(self, i, j)
    __swig_setmethods__["val"] = _kcftracker._Matx_int_3_1_val_set
    __swig_getmethods__["val"] = _kcftracker._Matx_int_3_1_val_get
    if _newclass:
        val = _swig_property(_kcftracker._Matx_int_3_1_val_get, _kcftracker._Matx_int_3_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Matx_int_3_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _kcftracker._Matx_int_3_1___str__(self)
    __swig_destroy__ = _kcftracker.delete__Matx_int_3_1
    __del__ = lambda self: None
_Matx_int_3_1_swigregister = _kcftracker._Matx_int_3_1_swigregister
_Matx_int_3_1_swigregister(_Matx_int_3_1)

def _Matx_int_3_1_all(alpha):
    return _kcftracker._Matx_int_3_1_all(alpha)
_Matx_int_3_1_all = _kcftracker._Matx_int_3_1_all

def _Matx_int_3_1_zeros():
    return _kcftracker._Matx_int_3_1_zeros()
_Matx_int_3_1_zeros = _kcftracker._Matx_int_3_1_zeros

def _Matx_int_3_1_ones():
    return _kcftracker._Matx_int_3_1_ones()
_Matx_int_3_1_ones = _kcftracker._Matx_int_3_1_ones

def _Matx_int_3_1_eye():
    return _kcftracker._Matx_int_3_1_eye()
_Matx_int_3_1_eye = _kcftracker._Matx_int_3_1_eye

def _Matx_int_3_1_randu(a, b):
    return _kcftracker._Matx_int_3_1_randu(a, b)
_Matx_int_3_1_randu = _kcftracker._Matx_int_3_1_randu

def _Matx_int_3_1_randn(a, b):
    return _kcftracker._Matx_int_3_1_randn(a, b)
_Matx_int_3_1_randn = _kcftracker._Matx_int_3_1_randn


Matx31i = _Matx_int_3_1

class _Vec_int_3(_Matx_int_3_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_int_3_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_int_3, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_int_3_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_int_3, name)
    __repr__ = _swig_repr
    channels = _kcftracker._Vec_int_3_channels
    __swig_getmethods__["all"] = lambda x: _kcftracker._Vec_int_3_all
    if _newclass:
        all = staticmethod(_kcftracker._Vec_int_3_all)

    def mul(self, v):
        return _kcftracker._Vec_int_3_mul(self, v)

    def __call__(self, i):
        return _kcftracker._Vec_int_3___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Vec_int_3(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _kcftracker._Vec_int_3___str__(self)
    __swig_destroy__ = _kcftracker.delete__Vec_int_3
    __del__ = lambda self: None
_Vec_int_3_swigregister = _kcftracker._Vec_int_3_swigregister
_Vec_int_3_swigregister(_Vec_int_3)

def _Vec_int_3_all(alpha):
    return _kcftracker._Vec_int_3_all(alpha)
_Vec_int_3_all = _kcftracker._Vec_int_3_all

class _DataType_Vec_int_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_int_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_int_3, name)
    __repr__ = _swig_repr
    generic_type = _kcftracker._DataType_Vec_int_3_generic_type
    channels = _kcftracker._DataType_Vec_int_3_channels
    fmt = _kcftracker._DataType_Vec_int_3_fmt

    def __init__(self):
        this = _kcftracker.new__DataType_Vec_int_3()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete__DataType_Vec_int_3
    __del__ = lambda self: None
_DataType_Vec_int_3_swigregister = _kcftracker._DataType_Vec_int_3_swigregister
_DataType_Vec_int_3_swigregister(_DataType_Vec_int_3)


Vec3i = _Vec_int_3
DataType_Vec3i = _DataType_Vec_int_3

class _Matx_int_4_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_int_4_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_int_4_1, name)
    __repr__ = _swig_repr
    rows = _kcftracker._Matx_int_4_1_rows
    cols = _kcftracker._Matx_int_4_1_cols
    channels = _kcftracker._Matx_int_4_1_channels
    shortdim = _kcftracker._Matx_int_4_1_shortdim
    __swig_getmethods__["all"] = lambda x: _kcftracker._Matx_int_4_1_all
    if _newclass:
        all = staticmethod(_kcftracker._Matx_int_4_1_all)
    __swig_getmethods__["zeros"] = lambda x: _kcftracker._Matx_int_4_1_zeros
    if _newclass:
        zeros = staticmethod(_kcftracker._Matx_int_4_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _kcftracker._Matx_int_4_1_ones
    if _newclass:
        ones = staticmethod(_kcftracker._Matx_int_4_1_ones)
    __swig_getmethods__["eye"] = lambda x: _kcftracker._Matx_int_4_1_eye
    if _newclass:
        eye = staticmethod(_kcftracker._Matx_int_4_1_eye)
    __swig_getmethods__["randu"] = lambda x: _kcftracker._Matx_int_4_1_randu
    if _newclass:
        randu = staticmethod(_kcftracker._Matx_int_4_1_randu)
    __swig_getmethods__["randn"] = lambda x: _kcftracker._Matx_int_4_1_randn
    if _newclass:
        randn = staticmethod(_kcftracker._Matx_int_4_1_randn)

    def dot(self, v):
        return _kcftracker._Matx_int_4_1_dot(self, v)

    def ddot(self, v):
        return _kcftracker._Matx_int_4_1_ddot(self, v)

    def t(self):
        return _kcftracker._Matx_int_4_1_t(self)

    def mul(self, a):
        return _kcftracker._Matx_int_4_1_mul(self, a)

    def div(self, a):
        return _kcftracker._Matx_int_4_1_div(self, a)

    def __call__(self, i, j):
        return _kcftracker._Matx_int_4_1___call__(self, i, j)
    __swig_setmethods__["val"] = _kcftracker._Matx_int_4_1_val_set
    __swig_getmethods__["val"] = _kcftracker._Matx_int_4_1_val_get
    if _newclass:
        val = _swig_property(_kcftracker._Matx_int_4_1_val_get, _kcftracker._Matx_int_4_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Matx_int_4_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _kcftracker._Matx_int_4_1___str__(self)
    __swig_destroy__ = _kcftracker.delete__Matx_int_4_1
    __del__ = lambda self: None
_Matx_int_4_1_swigregister = _kcftracker._Matx_int_4_1_swigregister
_Matx_int_4_1_swigregister(_Matx_int_4_1)

def _Matx_int_4_1_all(alpha):
    return _kcftracker._Matx_int_4_1_all(alpha)
_Matx_int_4_1_all = _kcftracker._Matx_int_4_1_all

def _Matx_int_4_1_zeros():
    return _kcftracker._Matx_int_4_1_zeros()
_Matx_int_4_1_zeros = _kcftracker._Matx_int_4_1_zeros

def _Matx_int_4_1_ones():
    return _kcftracker._Matx_int_4_1_ones()
_Matx_int_4_1_ones = _kcftracker._Matx_int_4_1_ones

def _Matx_int_4_1_eye():
    return _kcftracker._Matx_int_4_1_eye()
_Matx_int_4_1_eye = _kcftracker._Matx_int_4_1_eye

def _Matx_int_4_1_randu(a, b):
    return _kcftracker._Matx_int_4_1_randu(a, b)
_Matx_int_4_1_randu = _kcftracker._Matx_int_4_1_randu

def _Matx_int_4_1_randn(a, b):
    return _kcftracker._Matx_int_4_1_randn(a, b)
_Matx_int_4_1_randn = _kcftracker._Matx_int_4_1_randn


Matx41i = _Matx_int_4_1

class _Vec_int_4(_Matx_int_4_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_int_4_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_int_4, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_int_4_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_int_4, name)
    __repr__ = _swig_repr
    channels = _kcftracker._Vec_int_4_channels
    __swig_getmethods__["all"] = lambda x: _kcftracker._Vec_int_4_all
    if _newclass:
        all = staticmethod(_kcftracker._Vec_int_4_all)

    def mul(self, v):
        return _kcftracker._Vec_int_4_mul(self, v)

    def __call__(self, i):
        return _kcftracker._Vec_int_4___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Vec_int_4(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _kcftracker._Vec_int_4___str__(self)
    __swig_destroy__ = _kcftracker.delete__Vec_int_4
    __del__ = lambda self: None
_Vec_int_4_swigregister = _kcftracker._Vec_int_4_swigregister
_Vec_int_4_swigregister(_Vec_int_4)

def _Vec_int_4_all(alpha):
    return _kcftracker._Vec_int_4_all(alpha)
_Vec_int_4_all = _kcftracker._Vec_int_4_all

class _DataType_Vec_int_4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_int_4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_int_4, name)
    __repr__ = _swig_repr
    generic_type = _kcftracker._DataType_Vec_int_4_generic_type
    channels = _kcftracker._DataType_Vec_int_4_channels
    fmt = _kcftracker._DataType_Vec_int_4_fmt

    def __init__(self):
        this = _kcftracker.new__DataType_Vec_int_4()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete__DataType_Vec_int_4
    __del__ = lambda self: None
_DataType_Vec_int_4_swigregister = _kcftracker._DataType_Vec_int_4_swigregister
_DataType_Vec_int_4_swigregister(_DataType_Vec_int_4)


Vec4i = _Vec_int_4
DataType_Vec4i = _DataType_Vec_int_4

class _Matx_int_6_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_int_6_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_int_6_1, name)
    __repr__ = _swig_repr
    rows = _kcftracker._Matx_int_6_1_rows
    cols = _kcftracker._Matx_int_6_1_cols
    channels = _kcftracker._Matx_int_6_1_channels
    shortdim = _kcftracker._Matx_int_6_1_shortdim
    __swig_getmethods__["all"] = lambda x: _kcftracker._Matx_int_6_1_all
    if _newclass:
        all = staticmethod(_kcftracker._Matx_int_6_1_all)
    __swig_getmethods__["zeros"] = lambda x: _kcftracker._Matx_int_6_1_zeros
    if _newclass:
        zeros = staticmethod(_kcftracker._Matx_int_6_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _kcftracker._Matx_int_6_1_ones
    if _newclass:
        ones = staticmethod(_kcftracker._Matx_int_6_1_ones)
    __swig_getmethods__["eye"] = lambda x: _kcftracker._Matx_int_6_1_eye
    if _newclass:
        eye = staticmethod(_kcftracker._Matx_int_6_1_eye)
    __swig_getmethods__["randu"] = lambda x: _kcftracker._Matx_int_6_1_randu
    if _newclass:
        randu = staticmethod(_kcftracker._Matx_int_6_1_randu)
    __swig_getmethods__["randn"] = lambda x: _kcftracker._Matx_int_6_1_randn
    if _newclass:
        randn = staticmethod(_kcftracker._Matx_int_6_1_randn)

    def dot(self, v):
        return _kcftracker._Matx_int_6_1_dot(self, v)

    def ddot(self, v):
        return _kcftracker._Matx_int_6_1_ddot(self, v)

    def t(self):
        return _kcftracker._Matx_int_6_1_t(self)

    def mul(self, a):
        return _kcftracker._Matx_int_6_1_mul(self, a)

    def div(self, a):
        return _kcftracker._Matx_int_6_1_div(self, a)

    def __call__(self, i, j):
        return _kcftracker._Matx_int_6_1___call__(self, i, j)
    __swig_setmethods__["val"] = _kcftracker._Matx_int_6_1_val_set
    __swig_getmethods__["val"] = _kcftracker._Matx_int_6_1_val_get
    if _newclass:
        val = _swig_property(_kcftracker._Matx_int_6_1_val_get, _kcftracker._Matx_int_6_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Matx_int_6_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _kcftracker._Matx_int_6_1___str__(self)
    __swig_destroy__ = _kcftracker.delete__Matx_int_6_1
    __del__ = lambda self: None
_Matx_int_6_1_swigregister = _kcftracker._Matx_int_6_1_swigregister
_Matx_int_6_1_swigregister(_Matx_int_6_1)

def _Matx_int_6_1_all(alpha):
    return _kcftracker._Matx_int_6_1_all(alpha)
_Matx_int_6_1_all = _kcftracker._Matx_int_6_1_all

def _Matx_int_6_1_zeros():
    return _kcftracker._Matx_int_6_1_zeros()
_Matx_int_6_1_zeros = _kcftracker._Matx_int_6_1_zeros

def _Matx_int_6_1_ones():
    return _kcftracker._Matx_int_6_1_ones()
_Matx_int_6_1_ones = _kcftracker._Matx_int_6_1_ones

def _Matx_int_6_1_eye():
    return _kcftracker._Matx_int_6_1_eye()
_Matx_int_6_1_eye = _kcftracker._Matx_int_6_1_eye

def _Matx_int_6_1_randu(a, b):
    return _kcftracker._Matx_int_6_1_randu(a, b)
_Matx_int_6_1_randu = _kcftracker._Matx_int_6_1_randu

def _Matx_int_6_1_randn(a, b):
    return _kcftracker._Matx_int_6_1_randn(a, b)
_Matx_int_6_1_randn = _kcftracker._Matx_int_6_1_randn


Matx61i = _Matx_int_6_1

class _Vec_int_6(_Matx_int_6_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_int_6_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_int_6, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_int_6_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_int_6, name)
    __repr__ = _swig_repr
    channels = _kcftracker._Vec_int_6_channels
    __swig_getmethods__["all"] = lambda x: _kcftracker._Vec_int_6_all
    if _newclass:
        all = staticmethod(_kcftracker._Vec_int_6_all)

    def mul(self, v):
        return _kcftracker._Vec_int_6_mul(self, v)

    def __call__(self, i):
        return _kcftracker._Vec_int_6___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Vec_int_6(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _kcftracker._Vec_int_6___str__(self)
    __swig_destroy__ = _kcftracker.delete__Vec_int_6
    __del__ = lambda self: None
_Vec_int_6_swigregister = _kcftracker._Vec_int_6_swigregister
_Vec_int_6_swigregister(_Vec_int_6)

def _Vec_int_6_all(alpha):
    return _kcftracker._Vec_int_6_all(alpha)
_Vec_int_6_all = _kcftracker._Vec_int_6_all

class _DataType_Vec_int_6(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_int_6, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_int_6, name)
    __repr__ = _swig_repr
    generic_type = _kcftracker._DataType_Vec_int_6_generic_type
    channels = _kcftracker._DataType_Vec_int_6_channels
    fmt = _kcftracker._DataType_Vec_int_6_fmt

    def __init__(self):
        this = _kcftracker.new__DataType_Vec_int_6()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete__DataType_Vec_int_6
    __del__ = lambda self: None
_DataType_Vec_int_6_swigregister = _kcftracker._DataType_Vec_int_6_swigregister
_DataType_Vec_int_6_swigregister(_DataType_Vec_int_6)


Vec6i = _Vec_int_6
DataType_Vec6i = _DataType_Vec_int_6

class _Matx_int_8_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_int_8_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_int_8_1, name)
    __repr__ = _swig_repr
    rows = _kcftracker._Matx_int_8_1_rows
    cols = _kcftracker._Matx_int_8_1_cols
    channels = _kcftracker._Matx_int_8_1_channels
    shortdim = _kcftracker._Matx_int_8_1_shortdim
    __swig_getmethods__["all"] = lambda x: _kcftracker._Matx_int_8_1_all
    if _newclass:
        all = staticmethod(_kcftracker._Matx_int_8_1_all)
    __swig_getmethods__["zeros"] = lambda x: _kcftracker._Matx_int_8_1_zeros
    if _newclass:
        zeros = staticmethod(_kcftracker._Matx_int_8_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _kcftracker._Matx_int_8_1_ones
    if _newclass:
        ones = staticmethod(_kcftracker._Matx_int_8_1_ones)
    __swig_getmethods__["eye"] = lambda x: _kcftracker._Matx_int_8_1_eye
    if _newclass:
        eye = staticmethod(_kcftracker._Matx_int_8_1_eye)
    __swig_getmethods__["randu"] = lambda x: _kcftracker._Matx_int_8_1_randu
    if _newclass:
        randu = staticmethod(_kcftracker._Matx_int_8_1_randu)
    __swig_getmethods__["randn"] = lambda x: _kcftracker._Matx_int_8_1_randn
    if _newclass:
        randn = staticmethod(_kcftracker._Matx_int_8_1_randn)

    def dot(self, v):
        return _kcftracker._Matx_int_8_1_dot(self, v)

    def ddot(self, v):
        return _kcftracker._Matx_int_8_1_ddot(self, v)

    def t(self):
        return _kcftracker._Matx_int_8_1_t(self)

    def mul(self, a):
        return _kcftracker._Matx_int_8_1_mul(self, a)

    def div(self, a):
        return _kcftracker._Matx_int_8_1_div(self, a)

    def __call__(self, i, j):
        return _kcftracker._Matx_int_8_1___call__(self, i, j)
    __swig_setmethods__["val"] = _kcftracker._Matx_int_8_1_val_set
    __swig_getmethods__["val"] = _kcftracker._Matx_int_8_1_val_get
    if _newclass:
        val = _swig_property(_kcftracker._Matx_int_8_1_val_get, _kcftracker._Matx_int_8_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Matx_int_8_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _kcftracker._Matx_int_8_1___str__(self)
    __swig_destroy__ = _kcftracker.delete__Matx_int_8_1
    __del__ = lambda self: None
_Matx_int_8_1_swigregister = _kcftracker._Matx_int_8_1_swigregister
_Matx_int_8_1_swigregister(_Matx_int_8_1)

def _Matx_int_8_1_all(alpha):
    return _kcftracker._Matx_int_8_1_all(alpha)
_Matx_int_8_1_all = _kcftracker._Matx_int_8_1_all

def _Matx_int_8_1_zeros():
    return _kcftracker._Matx_int_8_1_zeros()
_Matx_int_8_1_zeros = _kcftracker._Matx_int_8_1_zeros

def _Matx_int_8_1_ones():
    return _kcftracker._Matx_int_8_1_ones()
_Matx_int_8_1_ones = _kcftracker._Matx_int_8_1_ones

def _Matx_int_8_1_eye():
    return _kcftracker._Matx_int_8_1_eye()
_Matx_int_8_1_eye = _kcftracker._Matx_int_8_1_eye

def _Matx_int_8_1_randu(a, b):
    return _kcftracker._Matx_int_8_1_randu(a, b)
_Matx_int_8_1_randu = _kcftracker._Matx_int_8_1_randu

def _Matx_int_8_1_randn(a, b):
    return _kcftracker._Matx_int_8_1_randn(a, b)
_Matx_int_8_1_randn = _kcftracker._Matx_int_8_1_randn


Matx81i = _Matx_int_8_1

class _Vec_int_8(_Matx_int_8_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_int_8_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_int_8, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_int_8_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_int_8, name)
    __repr__ = _swig_repr
    channels = _kcftracker._Vec_int_8_channels
    __swig_getmethods__["all"] = lambda x: _kcftracker._Vec_int_8_all
    if _newclass:
        all = staticmethod(_kcftracker._Vec_int_8_all)

    def mul(self, v):
        return _kcftracker._Vec_int_8_mul(self, v)

    def __call__(self, i):
        return _kcftracker._Vec_int_8___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Vec_int_8(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _kcftracker._Vec_int_8___str__(self)
    __swig_destroy__ = _kcftracker.delete__Vec_int_8
    __del__ = lambda self: None
_Vec_int_8_swigregister = _kcftracker._Vec_int_8_swigregister
_Vec_int_8_swigregister(_Vec_int_8)

def _Vec_int_8_all(alpha):
    return _kcftracker._Vec_int_8_all(alpha)
_Vec_int_8_all = _kcftracker._Vec_int_8_all

class _DataType_Vec_int_8(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_int_8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_int_8, name)
    __repr__ = _swig_repr
    generic_type = _kcftracker._DataType_Vec_int_8_generic_type
    channels = _kcftracker._DataType_Vec_int_8_channels
    fmt = _kcftracker._DataType_Vec_int_8_fmt

    def __init__(self):
        this = _kcftracker.new__DataType_Vec_int_8()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete__DataType_Vec_int_8
    __del__ = lambda self: None
_DataType_Vec_int_8_swigregister = _kcftracker._DataType_Vec_int_8_swigregister
_DataType_Vec_int_8_swigregister(_DataType_Vec_int_8)


Vec8i = _Vec_int_8
DataType_Vec8i = _DataType_Vec_int_8

class _cv_numpy_sizeof_float(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cv_numpy_sizeof_float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cv_numpy_sizeof_float, name)
    __repr__ = _swig_repr
    value = _kcftracker._cv_numpy_sizeof_float_value

    def __init__(self):
        this = _kcftracker.new__cv_numpy_sizeof_float()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete__cv_numpy_sizeof_float
    __del__ = lambda self: None
_cv_numpy_sizeof_float_swigregister = _kcftracker._cv_numpy_sizeof_float_swigregister
_cv_numpy_sizeof_float_swigregister(_cv_numpy_sizeof_float)


if _cv_numpy_sizeof_float.value == 1:
    _cv_numpy_typestr_map["float"] = "|" +"f" + "1"
else:
    _cv_numpy_typestr_map["float"] = _cv_numpy_endianess  +"f" + str(_cv_numpy_sizeof_float.value)

class _floatArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _floatArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _floatArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _kcftracker._floatArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _kcftracker._floatArray___nonzero__(self)

    def __bool__(self):
        return _kcftracker._floatArray___bool__(self)

    def __len__(self):
        return _kcftracker._floatArray___len__(self)

    def __getslice__(self, i, j):
        return _kcftracker._floatArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _kcftracker._floatArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _kcftracker._floatArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _kcftracker._floatArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _kcftracker._floatArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _kcftracker._floatArray___setitem__(self, *args)

    def pop(self):
        return _kcftracker._floatArray_pop(self)

    def append(self, x):
        return _kcftracker._floatArray_append(self, x)

    def empty(self):
        return _kcftracker._floatArray_empty(self)

    def size(self):
        return _kcftracker._floatArray_size(self)

    def swap(self, v):
        return _kcftracker._floatArray_swap(self, v)

    def begin(self):
        return _kcftracker._floatArray_begin(self)

    def end(self):
        return _kcftracker._floatArray_end(self)

    def rbegin(self):
        return _kcftracker._floatArray_rbegin(self)

    def rend(self):
        return _kcftracker._floatArray_rend(self)

    def clear(self):
        return _kcftracker._floatArray_clear(self)

    def get_allocator(self):
        return _kcftracker._floatArray_get_allocator(self)

    def pop_back(self):
        return _kcftracker._floatArray_pop_back(self)

    def erase(self, *args):
        return _kcftracker._floatArray_erase(self, *args)

    def __init__(self, *args):
        this = _kcftracker.new__floatArray(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _kcftracker._floatArray_push_back(self, x)

    def front(self):
        return _kcftracker._floatArray_front(self)

    def back(self):
        return _kcftracker._floatArray_back(self)

    def assign(self, n, x):
        return _kcftracker._floatArray_assign(self, n, x)

    def resize(self, *args):
        return _kcftracker._floatArray_resize(self, *args)

    def insert(self, *args):
        return _kcftracker._floatArray_insert(self, *args)

    def reserve(self, n):
        return _kcftracker._floatArray_reserve(self, n)

    def capacity(self):
        return _kcftracker._floatArray_capacity(self)
    __swig_destroy__ = _kcftracker.delete__floatArray
    __del__ = lambda self: None
_floatArray_swigregister = _kcftracker._floatArray_swigregister
_floatArray_swigregister(_floatArray)


_array_map["float"] = _floatArray

class _Matx_float_2_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_float_2_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_float_2_1, name)
    __repr__ = _swig_repr
    rows = _kcftracker._Matx_float_2_1_rows
    cols = _kcftracker._Matx_float_2_1_cols
    channels = _kcftracker._Matx_float_2_1_channels
    shortdim = _kcftracker._Matx_float_2_1_shortdim
    __swig_getmethods__["all"] = lambda x: _kcftracker._Matx_float_2_1_all
    if _newclass:
        all = staticmethod(_kcftracker._Matx_float_2_1_all)
    __swig_getmethods__["zeros"] = lambda x: _kcftracker._Matx_float_2_1_zeros
    if _newclass:
        zeros = staticmethod(_kcftracker._Matx_float_2_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _kcftracker._Matx_float_2_1_ones
    if _newclass:
        ones = staticmethod(_kcftracker._Matx_float_2_1_ones)
    __swig_getmethods__["eye"] = lambda x: _kcftracker._Matx_float_2_1_eye
    if _newclass:
        eye = staticmethod(_kcftracker._Matx_float_2_1_eye)
    __swig_getmethods__["randu"] = lambda x: _kcftracker._Matx_float_2_1_randu
    if _newclass:
        randu = staticmethod(_kcftracker._Matx_float_2_1_randu)
    __swig_getmethods__["randn"] = lambda x: _kcftracker._Matx_float_2_1_randn
    if _newclass:
        randn = staticmethod(_kcftracker._Matx_float_2_1_randn)

    def dot(self, v):
        return _kcftracker._Matx_float_2_1_dot(self, v)

    def ddot(self, v):
        return _kcftracker._Matx_float_2_1_ddot(self, v)

    def t(self):
        return _kcftracker._Matx_float_2_1_t(self)

    def mul(self, a):
        return _kcftracker._Matx_float_2_1_mul(self, a)

    def div(self, a):
        return _kcftracker._Matx_float_2_1_div(self, a)

    def __call__(self, i, j):
        return _kcftracker._Matx_float_2_1___call__(self, i, j)
    __swig_setmethods__["val"] = _kcftracker._Matx_float_2_1_val_set
    __swig_getmethods__["val"] = _kcftracker._Matx_float_2_1_val_get
    if _newclass:
        val = _swig_property(_kcftracker._Matx_float_2_1_val_get, _kcftracker._Matx_float_2_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Matx_float_2_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _kcftracker._Matx_float_2_1___str__(self)
    __swig_destroy__ = _kcftracker.delete__Matx_float_2_1
    __del__ = lambda self: None
_Matx_float_2_1_swigregister = _kcftracker._Matx_float_2_1_swigregister
_Matx_float_2_1_swigregister(_Matx_float_2_1)

def _Matx_float_2_1_all(alpha):
    return _kcftracker._Matx_float_2_1_all(alpha)
_Matx_float_2_1_all = _kcftracker._Matx_float_2_1_all

def _Matx_float_2_1_zeros():
    return _kcftracker._Matx_float_2_1_zeros()
_Matx_float_2_1_zeros = _kcftracker._Matx_float_2_1_zeros

def _Matx_float_2_1_ones():
    return _kcftracker._Matx_float_2_1_ones()
_Matx_float_2_1_ones = _kcftracker._Matx_float_2_1_ones

def _Matx_float_2_1_eye():
    return _kcftracker._Matx_float_2_1_eye()
_Matx_float_2_1_eye = _kcftracker._Matx_float_2_1_eye

def _Matx_float_2_1_randu(a, b):
    return _kcftracker._Matx_float_2_1_randu(a, b)
_Matx_float_2_1_randu = _kcftracker._Matx_float_2_1_randu

def _Matx_float_2_1_randn(a, b):
    return _kcftracker._Matx_float_2_1_randn(a, b)
_Matx_float_2_1_randn = _kcftracker._Matx_float_2_1_randn


Matx21f = _Matx_float_2_1

class _Vec_float_2(_Matx_float_2_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_float_2_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_float_2, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_float_2_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_float_2, name)
    __repr__ = _swig_repr
    channels = _kcftracker._Vec_float_2_channels
    __swig_getmethods__["all"] = lambda x: _kcftracker._Vec_float_2_all
    if _newclass:
        all = staticmethod(_kcftracker._Vec_float_2_all)

    def mul(self, v):
        return _kcftracker._Vec_float_2_mul(self, v)

    def __call__(self, i):
        return _kcftracker._Vec_float_2___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Vec_float_2(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _kcftracker._Vec_float_2___str__(self)
    __swig_destroy__ = _kcftracker.delete__Vec_float_2
    __del__ = lambda self: None
_Vec_float_2_swigregister = _kcftracker._Vec_float_2_swigregister
_Vec_float_2_swigregister(_Vec_float_2)

def _Vec_float_2_all(alpha):
    return _kcftracker._Vec_float_2_all(alpha)
_Vec_float_2_all = _kcftracker._Vec_float_2_all

class _DataType_Vec_float_2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_float_2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_float_2, name)
    __repr__ = _swig_repr
    generic_type = _kcftracker._DataType_Vec_float_2_generic_type
    channels = _kcftracker._DataType_Vec_float_2_channels
    fmt = _kcftracker._DataType_Vec_float_2_fmt

    def __init__(self):
        this = _kcftracker.new__DataType_Vec_float_2()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete__DataType_Vec_float_2
    __del__ = lambda self: None
_DataType_Vec_float_2_swigregister = _kcftracker._DataType_Vec_float_2_swigregister
_DataType_Vec_float_2_swigregister(_DataType_Vec_float_2)


Vec2f = _Vec_float_2
DataType_Vec2f = _DataType_Vec_float_2

class _Matx_float_3_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_float_3_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_float_3_1, name)
    __repr__ = _swig_repr
    rows = _kcftracker._Matx_float_3_1_rows
    cols = _kcftracker._Matx_float_3_1_cols
    channels = _kcftracker._Matx_float_3_1_channels
    shortdim = _kcftracker._Matx_float_3_1_shortdim
    __swig_getmethods__["all"] = lambda x: _kcftracker._Matx_float_3_1_all
    if _newclass:
        all = staticmethod(_kcftracker._Matx_float_3_1_all)
    __swig_getmethods__["zeros"] = lambda x: _kcftracker._Matx_float_3_1_zeros
    if _newclass:
        zeros = staticmethod(_kcftracker._Matx_float_3_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _kcftracker._Matx_float_3_1_ones
    if _newclass:
        ones = staticmethod(_kcftracker._Matx_float_3_1_ones)
    __swig_getmethods__["eye"] = lambda x: _kcftracker._Matx_float_3_1_eye
    if _newclass:
        eye = staticmethod(_kcftracker._Matx_float_3_1_eye)
    __swig_getmethods__["randu"] = lambda x: _kcftracker._Matx_float_3_1_randu
    if _newclass:
        randu = staticmethod(_kcftracker._Matx_float_3_1_randu)
    __swig_getmethods__["randn"] = lambda x: _kcftracker._Matx_float_3_1_randn
    if _newclass:
        randn = staticmethod(_kcftracker._Matx_float_3_1_randn)

    def dot(self, v):
        return _kcftracker._Matx_float_3_1_dot(self, v)

    def ddot(self, v):
        return _kcftracker._Matx_float_3_1_ddot(self, v)

    def t(self):
        return _kcftracker._Matx_float_3_1_t(self)

    def mul(self, a):
        return _kcftracker._Matx_float_3_1_mul(self, a)

    def div(self, a):
        return _kcftracker._Matx_float_3_1_div(self, a)

    def __call__(self, i, j):
        return _kcftracker._Matx_float_3_1___call__(self, i, j)
    __swig_setmethods__["val"] = _kcftracker._Matx_float_3_1_val_set
    __swig_getmethods__["val"] = _kcftracker._Matx_float_3_1_val_get
    if _newclass:
        val = _swig_property(_kcftracker._Matx_float_3_1_val_get, _kcftracker._Matx_float_3_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Matx_float_3_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _kcftracker._Matx_float_3_1___str__(self)
    __swig_destroy__ = _kcftracker.delete__Matx_float_3_1
    __del__ = lambda self: None
_Matx_float_3_1_swigregister = _kcftracker._Matx_float_3_1_swigregister
_Matx_float_3_1_swigregister(_Matx_float_3_1)

def _Matx_float_3_1_all(alpha):
    return _kcftracker._Matx_float_3_1_all(alpha)
_Matx_float_3_1_all = _kcftracker._Matx_float_3_1_all

def _Matx_float_3_1_zeros():
    return _kcftracker._Matx_float_3_1_zeros()
_Matx_float_3_1_zeros = _kcftracker._Matx_float_3_1_zeros

def _Matx_float_3_1_ones():
    return _kcftracker._Matx_float_3_1_ones()
_Matx_float_3_1_ones = _kcftracker._Matx_float_3_1_ones

def _Matx_float_3_1_eye():
    return _kcftracker._Matx_float_3_1_eye()
_Matx_float_3_1_eye = _kcftracker._Matx_float_3_1_eye

def _Matx_float_3_1_randu(a, b):
    return _kcftracker._Matx_float_3_1_randu(a, b)
_Matx_float_3_1_randu = _kcftracker._Matx_float_3_1_randu

def _Matx_float_3_1_randn(a, b):
    return _kcftracker._Matx_float_3_1_randn(a, b)
_Matx_float_3_1_randn = _kcftracker._Matx_float_3_1_randn


Matx31f = _Matx_float_3_1

class _Vec_float_3(_Matx_float_3_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_float_3_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_float_3, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_float_3_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_float_3, name)
    __repr__ = _swig_repr
    channels = _kcftracker._Vec_float_3_channels
    __swig_getmethods__["all"] = lambda x: _kcftracker._Vec_float_3_all
    if _newclass:
        all = staticmethod(_kcftracker._Vec_float_3_all)

    def mul(self, v):
        return _kcftracker._Vec_float_3_mul(self, v)

    def __call__(self, i):
        return _kcftracker._Vec_float_3___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Vec_float_3(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _kcftracker._Vec_float_3___str__(self)
    __swig_destroy__ = _kcftracker.delete__Vec_float_3
    __del__ = lambda self: None
_Vec_float_3_swigregister = _kcftracker._Vec_float_3_swigregister
_Vec_float_3_swigregister(_Vec_float_3)

def _Vec_float_3_all(alpha):
    return _kcftracker._Vec_float_3_all(alpha)
_Vec_float_3_all = _kcftracker._Vec_float_3_all

class _DataType_Vec_float_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_float_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_float_3, name)
    __repr__ = _swig_repr
    generic_type = _kcftracker._DataType_Vec_float_3_generic_type
    channels = _kcftracker._DataType_Vec_float_3_channels
    fmt = _kcftracker._DataType_Vec_float_3_fmt

    def __init__(self):
        this = _kcftracker.new__DataType_Vec_float_3()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete__DataType_Vec_float_3
    __del__ = lambda self: None
_DataType_Vec_float_3_swigregister = _kcftracker._DataType_Vec_float_3_swigregister
_DataType_Vec_float_3_swigregister(_DataType_Vec_float_3)


Vec3f = _Vec_float_3
DataType_Vec3f = _DataType_Vec_float_3

class _Matx_float_4_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_float_4_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_float_4_1, name)
    __repr__ = _swig_repr
    rows = _kcftracker._Matx_float_4_1_rows
    cols = _kcftracker._Matx_float_4_1_cols
    channels = _kcftracker._Matx_float_4_1_channels
    shortdim = _kcftracker._Matx_float_4_1_shortdim
    __swig_getmethods__["all"] = lambda x: _kcftracker._Matx_float_4_1_all
    if _newclass:
        all = staticmethod(_kcftracker._Matx_float_4_1_all)
    __swig_getmethods__["zeros"] = lambda x: _kcftracker._Matx_float_4_1_zeros
    if _newclass:
        zeros = staticmethod(_kcftracker._Matx_float_4_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _kcftracker._Matx_float_4_1_ones
    if _newclass:
        ones = staticmethod(_kcftracker._Matx_float_4_1_ones)
    __swig_getmethods__["eye"] = lambda x: _kcftracker._Matx_float_4_1_eye
    if _newclass:
        eye = staticmethod(_kcftracker._Matx_float_4_1_eye)
    __swig_getmethods__["randu"] = lambda x: _kcftracker._Matx_float_4_1_randu
    if _newclass:
        randu = staticmethod(_kcftracker._Matx_float_4_1_randu)
    __swig_getmethods__["randn"] = lambda x: _kcftracker._Matx_float_4_1_randn
    if _newclass:
        randn = staticmethod(_kcftracker._Matx_float_4_1_randn)

    def dot(self, v):
        return _kcftracker._Matx_float_4_1_dot(self, v)

    def ddot(self, v):
        return _kcftracker._Matx_float_4_1_ddot(self, v)

    def t(self):
        return _kcftracker._Matx_float_4_1_t(self)

    def mul(self, a):
        return _kcftracker._Matx_float_4_1_mul(self, a)

    def div(self, a):
        return _kcftracker._Matx_float_4_1_div(self, a)

    def __call__(self, i, j):
        return _kcftracker._Matx_float_4_1___call__(self, i, j)
    __swig_setmethods__["val"] = _kcftracker._Matx_float_4_1_val_set
    __swig_getmethods__["val"] = _kcftracker._Matx_float_4_1_val_get
    if _newclass:
        val = _swig_property(_kcftracker._Matx_float_4_1_val_get, _kcftracker._Matx_float_4_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Matx_float_4_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _kcftracker._Matx_float_4_1___str__(self)
    __swig_destroy__ = _kcftracker.delete__Matx_float_4_1
    __del__ = lambda self: None
_Matx_float_4_1_swigregister = _kcftracker._Matx_float_4_1_swigregister
_Matx_float_4_1_swigregister(_Matx_float_4_1)

def _Matx_float_4_1_all(alpha):
    return _kcftracker._Matx_float_4_1_all(alpha)
_Matx_float_4_1_all = _kcftracker._Matx_float_4_1_all

def _Matx_float_4_1_zeros():
    return _kcftracker._Matx_float_4_1_zeros()
_Matx_float_4_1_zeros = _kcftracker._Matx_float_4_1_zeros

def _Matx_float_4_1_ones():
    return _kcftracker._Matx_float_4_1_ones()
_Matx_float_4_1_ones = _kcftracker._Matx_float_4_1_ones

def _Matx_float_4_1_eye():
    return _kcftracker._Matx_float_4_1_eye()
_Matx_float_4_1_eye = _kcftracker._Matx_float_4_1_eye

def _Matx_float_4_1_randu(a, b):
    return _kcftracker._Matx_float_4_1_randu(a, b)
_Matx_float_4_1_randu = _kcftracker._Matx_float_4_1_randu

def _Matx_float_4_1_randn(a, b):
    return _kcftracker._Matx_float_4_1_randn(a, b)
_Matx_float_4_1_randn = _kcftracker._Matx_float_4_1_randn


Matx41f = _Matx_float_4_1

class _Vec_float_4(_Matx_float_4_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_float_4_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_float_4, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_float_4_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_float_4, name)
    __repr__ = _swig_repr
    channels = _kcftracker._Vec_float_4_channels
    __swig_getmethods__["all"] = lambda x: _kcftracker._Vec_float_4_all
    if _newclass:
        all = staticmethod(_kcftracker._Vec_float_4_all)

    def mul(self, v):
        return _kcftracker._Vec_float_4_mul(self, v)

    def __call__(self, i):
        return _kcftracker._Vec_float_4___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Vec_float_4(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _kcftracker._Vec_float_4___str__(self)
    __swig_destroy__ = _kcftracker.delete__Vec_float_4
    __del__ = lambda self: None
_Vec_float_4_swigregister = _kcftracker._Vec_float_4_swigregister
_Vec_float_4_swigregister(_Vec_float_4)

def _Vec_float_4_all(alpha):
    return _kcftracker._Vec_float_4_all(alpha)
_Vec_float_4_all = _kcftracker._Vec_float_4_all

class _DataType_Vec_float_4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_float_4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_float_4, name)
    __repr__ = _swig_repr
    generic_type = _kcftracker._DataType_Vec_float_4_generic_type
    channels = _kcftracker._DataType_Vec_float_4_channels
    fmt = _kcftracker._DataType_Vec_float_4_fmt

    def __init__(self):
        this = _kcftracker.new__DataType_Vec_float_4()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete__DataType_Vec_float_4
    __del__ = lambda self: None
_DataType_Vec_float_4_swigregister = _kcftracker._DataType_Vec_float_4_swigregister
_DataType_Vec_float_4_swigregister(_DataType_Vec_float_4)


Vec4f = _Vec_float_4
DataType_Vec4f = _DataType_Vec_float_4

class _Matx_float_6_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_float_6_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_float_6_1, name)
    __repr__ = _swig_repr
    rows = _kcftracker._Matx_float_6_1_rows
    cols = _kcftracker._Matx_float_6_1_cols
    channels = _kcftracker._Matx_float_6_1_channels
    shortdim = _kcftracker._Matx_float_6_1_shortdim
    __swig_getmethods__["all"] = lambda x: _kcftracker._Matx_float_6_1_all
    if _newclass:
        all = staticmethod(_kcftracker._Matx_float_6_1_all)
    __swig_getmethods__["zeros"] = lambda x: _kcftracker._Matx_float_6_1_zeros
    if _newclass:
        zeros = staticmethod(_kcftracker._Matx_float_6_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _kcftracker._Matx_float_6_1_ones
    if _newclass:
        ones = staticmethod(_kcftracker._Matx_float_6_1_ones)
    __swig_getmethods__["eye"] = lambda x: _kcftracker._Matx_float_6_1_eye
    if _newclass:
        eye = staticmethod(_kcftracker._Matx_float_6_1_eye)
    __swig_getmethods__["randu"] = lambda x: _kcftracker._Matx_float_6_1_randu
    if _newclass:
        randu = staticmethod(_kcftracker._Matx_float_6_1_randu)
    __swig_getmethods__["randn"] = lambda x: _kcftracker._Matx_float_6_1_randn
    if _newclass:
        randn = staticmethod(_kcftracker._Matx_float_6_1_randn)

    def dot(self, v):
        return _kcftracker._Matx_float_6_1_dot(self, v)

    def ddot(self, v):
        return _kcftracker._Matx_float_6_1_ddot(self, v)

    def t(self):
        return _kcftracker._Matx_float_6_1_t(self)

    def mul(self, a):
        return _kcftracker._Matx_float_6_1_mul(self, a)

    def div(self, a):
        return _kcftracker._Matx_float_6_1_div(self, a)

    def __call__(self, i, j):
        return _kcftracker._Matx_float_6_1___call__(self, i, j)
    __swig_setmethods__["val"] = _kcftracker._Matx_float_6_1_val_set
    __swig_getmethods__["val"] = _kcftracker._Matx_float_6_1_val_get
    if _newclass:
        val = _swig_property(_kcftracker._Matx_float_6_1_val_get, _kcftracker._Matx_float_6_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Matx_float_6_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _kcftracker._Matx_float_6_1___str__(self)
    __swig_destroy__ = _kcftracker.delete__Matx_float_6_1
    __del__ = lambda self: None
_Matx_float_6_1_swigregister = _kcftracker._Matx_float_6_1_swigregister
_Matx_float_6_1_swigregister(_Matx_float_6_1)

def _Matx_float_6_1_all(alpha):
    return _kcftracker._Matx_float_6_1_all(alpha)
_Matx_float_6_1_all = _kcftracker._Matx_float_6_1_all

def _Matx_float_6_1_zeros():
    return _kcftracker._Matx_float_6_1_zeros()
_Matx_float_6_1_zeros = _kcftracker._Matx_float_6_1_zeros

def _Matx_float_6_1_ones():
    return _kcftracker._Matx_float_6_1_ones()
_Matx_float_6_1_ones = _kcftracker._Matx_float_6_1_ones

def _Matx_float_6_1_eye():
    return _kcftracker._Matx_float_6_1_eye()
_Matx_float_6_1_eye = _kcftracker._Matx_float_6_1_eye

def _Matx_float_6_1_randu(a, b):
    return _kcftracker._Matx_float_6_1_randu(a, b)
_Matx_float_6_1_randu = _kcftracker._Matx_float_6_1_randu

def _Matx_float_6_1_randn(a, b):
    return _kcftracker._Matx_float_6_1_randn(a, b)
_Matx_float_6_1_randn = _kcftracker._Matx_float_6_1_randn


Matx61f = _Matx_float_6_1

class _Vec_float_6(_Matx_float_6_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_float_6_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_float_6, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_float_6_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_float_6, name)
    __repr__ = _swig_repr
    channels = _kcftracker._Vec_float_6_channels
    __swig_getmethods__["all"] = lambda x: _kcftracker._Vec_float_6_all
    if _newclass:
        all = staticmethod(_kcftracker._Vec_float_6_all)

    def mul(self, v):
        return _kcftracker._Vec_float_6_mul(self, v)

    def __call__(self, i):
        return _kcftracker._Vec_float_6___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Vec_float_6(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _kcftracker._Vec_float_6___str__(self)
    __swig_destroy__ = _kcftracker.delete__Vec_float_6
    __del__ = lambda self: None
_Vec_float_6_swigregister = _kcftracker._Vec_float_6_swigregister
_Vec_float_6_swigregister(_Vec_float_6)

def _Vec_float_6_all(alpha):
    return _kcftracker._Vec_float_6_all(alpha)
_Vec_float_6_all = _kcftracker._Vec_float_6_all

class _DataType_Vec_float_6(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_float_6, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_float_6, name)
    __repr__ = _swig_repr
    generic_type = _kcftracker._DataType_Vec_float_6_generic_type
    channels = _kcftracker._DataType_Vec_float_6_channels
    fmt = _kcftracker._DataType_Vec_float_6_fmt

    def __init__(self):
        this = _kcftracker.new__DataType_Vec_float_6()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete__DataType_Vec_float_6
    __del__ = lambda self: None
_DataType_Vec_float_6_swigregister = _kcftracker._DataType_Vec_float_6_swigregister
_DataType_Vec_float_6_swigregister(_DataType_Vec_float_6)


Vec6f = _Vec_float_6
DataType_Vec6f = _DataType_Vec_float_6

class _cv_numpy_sizeof_double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cv_numpy_sizeof_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cv_numpy_sizeof_double, name)
    __repr__ = _swig_repr
    value = _kcftracker._cv_numpy_sizeof_double_value

    def __init__(self):
        this = _kcftracker.new__cv_numpy_sizeof_double()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete__cv_numpy_sizeof_double
    __del__ = lambda self: None
_cv_numpy_sizeof_double_swigregister = _kcftracker._cv_numpy_sizeof_double_swigregister
_cv_numpy_sizeof_double_swigregister(_cv_numpy_sizeof_double)


if _cv_numpy_sizeof_double.value == 1:
    _cv_numpy_typestr_map["double"] = "|" +"f" + "1"
else:
    _cv_numpy_typestr_map["double"] = _cv_numpy_endianess  +"f" + str(_cv_numpy_sizeof_double.value)

class _doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _doubleArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _kcftracker._doubleArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _kcftracker._doubleArray___nonzero__(self)

    def __bool__(self):
        return _kcftracker._doubleArray___bool__(self)

    def __len__(self):
        return _kcftracker._doubleArray___len__(self)

    def __getslice__(self, i, j):
        return _kcftracker._doubleArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _kcftracker._doubleArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _kcftracker._doubleArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _kcftracker._doubleArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _kcftracker._doubleArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _kcftracker._doubleArray___setitem__(self, *args)

    def pop(self):
        return _kcftracker._doubleArray_pop(self)

    def append(self, x):
        return _kcftracker._doubleArray_append(self, x)

    def empty(self):
        return _kcftracker._doubleArray_empty(self)

    def size(self):
        return _kcftracker._doubleArray_size(self)

    def swap(self, v):
        return _kcftracker._doubleArray_swap(self, v)

    def begin(self):
        return _kcftracker._doubleArray_begin(self)

    def end(self):
        return _kcftracker._doubleArray_end(self)

    def rbegin(self):
        return _kcftracker._doubleArray_rbegin(self)

    def rend(self):
        return _kcftracker._doubleArray_rend(self)

    def clear(self):
        return _kcftracker._doubleArray_clear(self)

    def get_allocator(self):
        return _kcftracker._doubleArray_get_allocator(self)

    def pop_back(self):
        return _kcftracker._doubleArray_pop_back(self)

    def erase(self, *args):
        return _kcftracker._doubleArray_erase(self, *args)

    def __init__(self, *args):
        this = _kcftracker.new__doubleArray(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _kcftracker._doubleArray_push_back(self, x)

    def front(self):
        return _kcftracker._doubleArray_front(self)

    def back(self):
        return _kcftracker._doubleArray_back(self)

    def assign(self, n, x):
        return _kcftracker._doubleArray_assign(self, n, x)

    def resize(self, *args):
        return _kcftracker._doubleArray_resize(self, *args)

    def insert(self, *args):
        return _kcftracker._doubleArray_insert(self, *args)

    def reserve(self, n):
        return _kcftracker._doubleArray_reserve(self, n)

    def capacity(self):
        return _kcftracker._doubleArray_capacity(self)
    __swig_destroy__ = _kcftracker.delete__doubleArray
    __del__ = lambda self: None
_doubleArray_swigregister = _kcftracker._doubleArray_swigregister
_doubleArray_swigregister(_doubleArray)


_array_map["double"] = _doubleArray

class _Matx_double_2_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_double_2_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_double_2_1, name)
    __repr__ = _swig_repr
    rows = _kcftracker._Matx_double_2_1_rows
    cols = _kcftracker._Matx_double_2_1_cols
    channels = _kcftracker._Matx_double_2_1_channels
    shortdim = _kcftracker._Matx_double_2_1_shortdim
    __swig_getmethods__["all"] = lambda x: _kcftracker._Matx_double_2_1_all
    if _newclass:
        all = staticmethod(_kcftracker._Matx_double_2_1_all)
    __swig_getmethods__["zeros"] = lambda x: _kcftracker._Matx_double_2_1_zeros
    if _newclass:
        zeros = staticmethod(_kcftracker._Matx_double_2_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _kcftracker._Matx_double_2_1_ones
    if _newclass:
        ones = staticmethod(_kcftracker._Matx_double_2_1_ones)
    __swig_getmethods__["eye"] = lambda x: _kcftracker._Matx_double_2_1_eye
    if _newclass:
        eye = staticmethod(_kcftracker._Matx_double_2_1_eye)
    __swig_getmethods__["randu"] = lambda x: _kcftracker._Matx_double_2_1_randu
    if _newclass:
        randu = staticmethod(_kcftracker._Matx_double_2_1_randu)
    __swig_getmethods__["randn"] = lambda x: _kcftracker._Matx_double_2_1_randn
    if _newclass:
        randn = staticmethod(_kcftracker._Matx_double_2_1_randn)

    def dot(self, v):
        return _kcftracker._Matx_double_2_1_dot(self, v)

    def ddot(self, v):
        return _kcftracker._Matx_double_2_1_ddot(self, v)

    def t(self):
        return _kcftracker._Matx_double_2_1_t(self)

    def mul(self, a):
        return _kcftracker._Matx_double_2_1_mul(self, a)

    def div(self, a):
        return _kcftracker._Matx_double_2_1_div(self, a)

    def __call__(self, i, j):
        return _kcftracker._Matx_double_2_1___call__(self, i, j)
    __swig_setmethods__["val"] = _kcftracker._Matx_double_2_1_val_set
    __swig_getmethods__["val"] = _kcftracker._Matx_double_2_1_val_get
    if _newclass:
        val = _swig_property(_kcftracker._Matx_double_2_1_val_get, _kcftracker._Matx_double_2_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Matx_double_2_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _kcftracker._Matx_double_2_1___str__(self)
    __swig_destroy__ = _kcftracker.delete__Matx_double_2_1
    __del__ = lambda self: None
_Matx_double_2_1_swigregister = _kcftracker._Matx_double_2_1_swigregister
_Matx_double_2_1_swigregister(_Matx_double_2_1)

def _Matx_double_2_1_all(alpha):
    return _kcftracker._Matx_double_2_1_all(alpha)
_Matx_double_2_1_all = _kcftracker._Matx_double_2_1_all

def _Matx_double_2_1_zeros():
    return _kcftracker._Matx_double_2_1_zeros()
_Matx_double_2_1_zeros = _kcftracker._Matx_double_2_1_zeros

def _Matx_double_2_1_ones():
    return _kcftracker._Matx_double_2_1_ones()
_Matx_double_2_1_ones = _kcftracker._Matx_double_2_1_ones

def _Matx_double_2_1_eye():
    return _kcftracker._Matx_double_2_1_eye()
_Matx_double_2_1_eye = _kcftracker._Matx_double_2_1_eye

def _Matx_double_2_1_randu(a, b):
    return _kcftracker._Matx_double_2_1_randu(a, b)
_Matx_double_2_1_randu = _kcftracker._Matx_double_2_1_randu

def _Matx_double_2_1_randn(a, b):
    return _kcftracker._Matx_double_2_1_randn(a, b)
_Matx_double_2_1_randn = _kcftracker._Matx_double_2_1_randn


Matx21d = _Matx_double_2_1

class _Vec_double_2(_Matx_double_2_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_double_2_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_double_2, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_double_2_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_double_2, name)
    __repr__ = _swig_repr
    channels = _kcftracker._Vec_double_2_channels
    __swig_getmethods__["all"] = lambda x: _kcftracker._Vec_double_2_all
    if _newclass:
        all = staticmethod(_kcftracker._Vec_double_2_all)

    def mul(self, v):
        return _kcftracker._Vec_double_2_mul(self, v)

    def __call__(self, i):
        return _kcftracker._Vec_double_2___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Vec_double_2(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _kcftracker._Vec_double_2___str__(self)
    __swig_destroy__ = _kcftracker.delete__Vec_double_2
    __del__ = lambda self: None
_Vec_double_2_swigregister = _kcftracker._Vec_double_2_swigregister
_Vec_double_2_swigregister(_Vec_double_2)

def _Vec_double_2_all(alpha):
    return _kcftracker._Vec_double_2_all(alpha)
_Vec_double_2_all = _kcftracker._Vec_double_2_all

class _DataType_Vec_double_2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_double_2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_double_2, name)
    __repr__ = _swig_repr
    generic_type = _kcftracker._DataType_Vec_double_2_generic_type
    channels = _kcftracker._DataType_Vec_double_2_channels
    fmt = _kcftracker._DataType_Vec_double_2_fmt

    def __init__(self):
        this = _kcftracker.new__DataType_Vec_double_2()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete__DataType_Vec_double_2
    __del__ = lambda self: None
_DataType_Vec_double_2_swigregister = _kcftracker._DataType_Vec_double_2_swigregister
_DataType_Vec_double_2_swigregister(_DataType_Vec_double_2)


Vec2d = _Vec_double_2
DataType_Vec2d = _DataType_Vec_double_2

class _Matx_double_3_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_double_3_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_double_3_1, name)
    __repr__ = _swig_repr
    rows = _kcftracker._Matx_double_3_1_rows
    cols = _kcftracker._Matx_double_3_1_cols
    channels = _kcftracker._Matx_double_3_1_channels
    shortdim = _kcftracker._Matx_double_3_1_shortdim
    __swig_getmethods__["all"] = lambda x: _kcftracker._Matx_double_3_1_all
    if _newclass:
        all = staticmethod(_kcftracker._Matx_double_3_1_all)
    __swig_getmethods__["zeros"] = lambda x: _kcftracker._Matx_double_3_1_zeros
    if _newclass:
        zeros = staticmethod(_kcftracker._Matx_double_3_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _kcftracker._Matx_double_3_1_ones
    if _newclass:
        ones = staticmethod(_kcftracker._Matx_double_3_1_ones)
    __swig_getmethods__["eye"] = lambda x: _kcftracker._Matx_double_3_1_eye
    if _newclass:
        eye = staticmethod(_kcftracker._Matx_double_3_1_eye)
    __swig_getmethods__["randu"] = lambda x: _kcftracker._Matx_double_3_1_randu
    if _newclass:
        randu = staticmethod(_kcftracker._Matx_double_3_1_randu)
    __swig_getmethods__["randn"] = lambda x: _kcftracker._Matx_double_3_1_randn
    if _newclass:
        randn = staticmethod(_kcftracker._Matx_double_3_1_randn)

    def dot(self, v):
        return _kcftracker._Matx_double_3_1_dot(self, v)

    def ddot(self, v):
        return _kcftracker._Matx_double_3_1_ddot(self, v)

    def t(self):
        return _kcftracker._Matx_double_3_1_t(self)

    def mul(self, a):
        return _kcftracker._Matx_double_3_1_mul(self, a)

    def div(self, a):
        return _kcftracker._Matx_double_3_1_div(self, a)

    def __call__(self, i, j):
        return _kcftracker._Matx_double_3_1___call__(self, i, j)
    __swig_setmethods__["val"] = _kcftracker._Matx_double_3_1_val_set
    __swig_getmethods__["val"] = _kcftracker._Matx_double_3_1_val_get
    if _newclass:
        val = _swig_property(_kcftracker._Matx_double_3_1_val_get, _kcftracker._Matx_double_3_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Matx_double_3_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _kcftracker._Matx_double_3_1___str__(self)
    __swig_destroy__ = _kcftracker.delete__Matx_double_3_1
    __del__ = lambda self: None
_Matx_double_3_1_swigregister = _kcftracker._Matx_double_3_1_swigregister
_Matx_double_3_1_swigregister(_Matx_double_3_1)

def _Matx_double_3_1_all(alpha):
    return _kcftracker._Matx_double_3_1_all(alpha)
_Matx_double_3_1_all = _kcftracker._Matx_double_3_1_all

def _Matx_double_3_1_zeros():
    return _kcftracker._Matx_double_3_1_zeros()
_Matx_double_3_1_zeros = _kcftracker._Matx_double_3_1_zeros

def _Matx_double_3_1_ones():
    return _kcftracker._Matx_double_3_1_ones()
_Matx_double_3_1_ones = _kcftracker._Matx_double_3_1_ones

def _Matx_double_3_1_eye():
    return _kcftracker._Matx_double_3_1_eye()
_Matx_double_3_1_eye = _kcftracker._Matx_double_3_1_eye

def _Matx_double_3_1_randu(a, b):
    return _kcftracker._Matx_double_3_1_randu(a, b)
_Matx_double_3_1_randu = _kcftracker._Matx_double_3_1_randu

def _Matx_double_3_1_randn(a, b):
    return _kcftracker._Matx_double_3_1_randn(a, b)
_Matx_double_3_1_randn = _kcftracker._Matx_double_3_1_randn


Matx31d = _Matx_double_3_1

class _Vec_double_3(_Matx_double_3_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_double_3_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_double_3, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_double_3_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_double_3, name)
    __repr__ = _swig_repr
    channels = _kcftracker._Vec_double_3_channels
    __swig_getmethods__["all"] = lambda x: _kcftracker._Vec_double_3_all
    if _newclass:
        all = staticmethod(_kcftracker._Vec_double_3_all)

    def mul(self, v):
        return _kcftracker._Vec_double_3_mul(self, v)

    def __call__(self, i):
        return _kcftracker._Vec_double_3___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Vec_double_3(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _kcftracker._Vec_double_3___str__(self)
    __swig_destroy__ = _kcftracker.delete__Vec_double_3
    __del__ = lambda self: None
_Vec_double_3_swigregister = _kcftracker._Vec_double_3_swigregister
_Vec_double_3_swigregister(_Vec_double_3)

def _Vec_double_3_all(alpha):
    return _kcftracker._Vec_double_3_all(alpha)
_Vec_double_3_all = _kcftracker._Vec_double_3_all

class _DataType_Vec_double_3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_double_3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_double_3, name)
    __repr__ = _swig_repr
    generic_type = _kcftracker._DataType_Vec_double_3_generic_type
    channels = _kcftracker._DataType_Vec_double_3_channels
    fmt = _kcftracker._DataType_Vec_double_3_fmt

    def __init__(self):
        this = _kcftracker.new__DataType_Vec_double_3()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete__DataType_Vec_double_3
    __del__ = lambda self: None
_DataType_Vec_double_3_swigregister = _kcftracker._DataType_Vec_double_3_swigregister
_DataType_Vec_double_3_swigregister(_DataType_Vec_double_3)


Vec3d = _Vec_double_3
DataType_Vec3d = _DataType_Vec_double_3

class _Matx_double_4_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_double_4_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_double_4_1, name)
    __repr__ = _swig_repr
    rows = _kcftracker._Matx_double_4_1_rows
    cols = _kcftracker._Matx_double_4_1_cols
    channels = _kcftracker._Matx_double_4_1_channels
    shortdim = _kcftracker._Matx_double_4_1_shortdim
    __swig_getmethods__["all"] = lambda x: _kcftracker._Matx_double_4_1_all
    if _newclass:
        all = staticmethod(_kcftracker._Matx_double_4_1_all)
    __swig_getmethods__["zeros"] = lambda x: _kcftracker._Matx_double_4_1_zeros
    if _newclass:
        zeros = staticmethod(_kcftracker._Matx_double_4_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _kcftracker._Matx_double_4_1_ones
    if _newclass:
        ones = staticmethod(_kcftracker._Matx_double_4_1_ones)
    __swig_getmethods__["eye"] = lambda x: _kcftracker._Matx_double_4_1_eye
    if _newclass:
        eye = staticmethod(_kcftracker._Matx_double_4_1_eye)
    __swig_getmethods__["randu"] = lambda x: _kcftracker._Matx_double_4_1_randu
    if _newclass:
        randu = staticmethod(_kcftracker._Matx_double_4_1_randu)
    __swig_getmethods__["randn"] = lambda x: _kcftracker._Matx_double_4_1_randn
    if _newclass:
        randn = staticmethod(_kcftracker._Matx_double_4_1_randn)

    def dot(self, v):
        return _kcftracker._Matx_double_4_1_dot(self, v)

    def ddot(self, v):
        return _kcftracker._Matx_double_4_1_ddot(self, v)

    def t(self):
        return _kcftracker._Matx_double_4_1_t(self)

    def mul(self, a):
        return _kcftracker._Matx_double_4_1_mul(self, a)

    def div(self, a):
        return _kcftracker._Matx_double_4_1_div(self, a)

    def __call__(self, i, j):
        return _kcftracker._Matx_double_4_1___call__(self, i, j)
    __swig_setmethods__["val"] = _kcftracker._Matx_double_4_1_val_set
    __swig_getmethods__["val"] = _kcftracker._Matx_double_4_1_val_get
    if _newclass:
        val = _swig_property(_kcftracker._Matx_double_4_1_val_get, _kcftracker._Matx_double_4_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Matx_double_4_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _kcftracker._Matx_double_4_1___str__(self)
    __swig_destroy__ = _kcftracker.delete__Matx_double_4_1
    __del__ = lambda self: None
_Matx_double_4_1_swigregister = _kcftracker._Matx_double_4_1_swigregister
_Matx_double_4_1_swigregister(_Matx_double_4_1)

def _Matx_double_4_1_all(alpha):
    return _kcftracker._Matx_double_4_1_all(alpha)
_Matx_double_4_1_all = _kcftracker._Matx_double_4_1_all

def _Matx_double_4_1_zeros():
    return _kcftracker._Matx_double_4_1_zeros()
_Matx_double_4_1_zeros = _kcftracker._Matx_double_4_1_zeros

def _Matx_double_4_1_ones():
    return _kcftracker._Matx_double_4_1_ones()
_Matx_double_4_1_ones = _kcftracker._Matx_double_4_1_ones

def _Matx_double_4_1_eye():
    return _kcftracker._Matx_double_4_1_eye()
_Matx_double_4_1_eye = _kcftracker._Matx_double_4_1_eye

def _Matx_double_4_1_randu(a, b):
    return _kcftracker._Matx_double_4_1_randu(a, b)
_Matx_double_4_1_randu = _kcftracker._Matx_double_4_1_randu

def _Matx_double_4_1_randn(a, b):
    return _kcftracker._Matx_double_4_1_randn(a, b)
_Matx_double_4_1_randn = _kcftracker._Matx_double_4_1_randn


Matx41d = _Matx_double_4_1

class _Vec_double_4(_Matx_double_4_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_double_4_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_double_4, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_double_4_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_double_4, name)
    __repr__ = _swig_repr
    channels = _kcftracker._Vec_double_4_channels
    __swig_getmethods__["all"] = lambda x: _kcftracker._Vec_double_4_all
    if _newclass:
        all = staticmethod(_kcftracker._Vec_double_4_all)

    def mul(self, v):
        return _kcftracker._Vec_double_4_mul(self, v)

    def __call__(self, i):
        return _kcftracker._Vec_double_4___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Vec_double_4(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _kcftracker._Vec_double_4___str__(self)
    __swig_destroy__ = _kcftracker.delete__Vec_double_4
    __del__ = lambda self: None
_Vec_double_4_swigregister = _kcftracker._Vec_double_4_swigregister
_Vec_double_4_swigregister(_Vec_double_4)

def _Vec_double_4_all(alpha):
    return _kcftracker._Vec_double_4_all(alpha)
_Vec_double_4_all = _kcftracker._Vec_double_4_all

class _DataType_Vec_double_4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_double_4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_double_4, name)
    __repr__ = _swig_repr
    generic_type = _kcftracker._DataType_Vec_double_4_generic_type
    channels = _kcftracker._DataType_Vec_double_4_channels
    fmt = _kcftracker._DataType_Vec_double_4_fmt

    def __init__(self):
        this = _kcftracker.new__DataType_Vec_double_4()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete__DataType_Vec_double_4
    __del__ = lambda self: None
_DataType_Vec_double_4_swigregister = _kcftracker._DataType_Vec_double_4_swigregister
_DataType_Vec_double_4_swigregister(_DataType_Vec_double_4)


Vec4d = _Vec_double_4
DataType_Vec4d = _DataType_Vec_double_4

class _Matx_double_6_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Matx_double_6_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Matx_double_6_1, name)
    __repr__ = _swig_repr
    rows = _kcftracker._Matx_double_6_1_rows
    cols = _kcftracker._Matx_double_6_1_cols
    channels = _kcftracker._Matx_double_6_1_channels
    shortdim = _kcftracker._Matx_double_6_1_shortdim
    __swig_getmethods__["all"] = lambda x: _kcftracker._Matx_double_6_1_all
    if _newclass:
        all = staticmethod(_kcftracker._Matx_double_6_1_all)
    __swig_getmethods__["zeros"] = lambda x: _kcftracker._Matx_double_6_1_zeros
    if _newclass:
        zeros = staticmethod(_kcftracker._Matx_double_6_1_zeros)
    __swig_getmethods__["ones"] = lambda x: _kcftracker._Matx_double_6_1_ones
    if _newclass:
        ones = staticmethod(_kcftracker._Matx_double_6_1_ones)
    __swig_getmethods__["eye"] = lambda x: _kcftracker._Matx_double_6_1_eye
    if _newclass:
        eye = staticmethod(_kcftracker._Matx_double_6_1_eye)
    __swig_getmethods__["randu"] = lambda x: _kcftracker._Matx_double_6_1_randu
    if _newclass:
        randu = staticmethod(_kcftracker._Matx_double_6_1_randu)
    __swig_getmethods__["randn"] = lambda x: _kcftracker._Matx_double_6_1_randn
    if _newclass:
        randn = staticmethod(_kcftracker._Matx_double_6_1_randn)

    def dot(self, v):
        return _kcftracker._Matx_double_6_1_dot(self, v)

    def ddot(self, v):
        return _kcftracker._Matx_double_6_1_ddot(self, v)

    def t(self):
        return _kcftracker._Matx_double_6_1_t(self)

    def mul(self, a):
        return _kcftracker._Matx_double_6_1_mul(self, a)

    def div(self, a):
        return _kcftracker._Matx_double_6_1_div(self, a)

    def __call__(self, i, j):
        return _kcftracker._Matx_double_6_1___call__(self, i, j)
    __swig_setmethods__["val"] = _kcftracker._Matx_double_6_1_val_set
    __swig_getmethods__["val"] = _kcftracker._Matx_double_6_1_val_get
    if _newclass:
        val = _swig_property(_kcftracker._Matx_double_6_1_val_get, _kcftracker._Matx_double_6_1_val_set)

    import re
    _re_pattern = re.compile("^_Matx_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)_(?P<cols>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        array = _array_map[value_type](rows*cols)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Matx_double_6_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            cols = int(ma.group("cols"))
            return {"shape": (rows, cols),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)


    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))
        cols = int(ma.group("cols"))

        if isinstance(key, int):
            if rows != 1 and cols != 1:
                raise IndexError
            i = key
            j = 0
        elif isinstance(key, tuple) and len(key) == 2:
            i = key[0]
            j = key[1]
        else:
            raise TypeError

        if i >= rows or j >= cols:
            raise IndexError

        return self(i, j)


    def __str__(self):
        return _kcftracker._Matx_double_6_1___str__(self)
    __swig_destroy__ = _kcftracker.delete__Matx_double_6_1
    __del__ = lambda self: None
_Matx_double_6_1_swigregister = _kcftracker._Matx_double_6_1_swigregister
_Matx_double_6_1_swigregister(_Matx_double_6_1)

def _Matx_double_6_1_all(alpha):
    return _kcftracker._Matx_double_6_1_all(alpha)
_Matx_double_6_1_all = _kcftracker._Matx_double_6_1_all

def _Matx_double_6_1_zeros():
    return _kcftracker._Matx_double_6_1_zeros()
_Matx_double_6_1_zeros = _kcftracker._Matx_double_6_1_zeros

def _Matx_double_6_1_ones():
    return _kcftracker._Matx_double_6_1_ones()
_Matx_double_6_1_ones = _kcftracker._Matx_double_6_1_ones

def _Matx_double_6_1_eye():
    return _kcftracker._Matx_double_6_1_eye()
_Matx_double_6_1_eye = _kcftracker._Matx_double_6_1_eye

def _Matx_double_6_1_randu(a, b):
    return _kcftracker._Matx_double_6_1_randu(a, b)
_Matx_double_6_1_randu = _kcftracker._Matx_double_6_1_randu

def _Matx_double_6_1_randn(a, b):
    return _kcftracker._Matx_double_6_1_randn(a, b)
_Matx_double_6_1_randn = _kcftracker._Matx_double_6_1_randn


Matx61d = _Matx_double_6_1

class _Vec_double_6(_Matx_double_6_1):
    __swig_setmethods__ = {}
    for _s in [_Matx_double_6_1]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Vec_double_6, name, value)
    __swig_getmethods__ = {}
    for _s in [_Matx_double_6_1]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, _Vec_double_6, name)
    __repr__ = _swig_repr
    channels = _kcftracker._Vec_double_6_channels
    __swig_getmethods__["all"] = lambda x: _kcftracker._Vec_double_6_all
    if _newclass:
        all = staticmethod(_kcftracker._Vec_double_6_all)

    def mul(self, v):
        return _kcftracker._Vec_double_6_mul(self, v)

    def __call__(self, i):
        return _kcftracker._Vec_double_6___call__(self, i)

    import re
    _re_pattern = re.compile("^_Vec_(?P<value_type>[a-zA-Z_][a-zA-Z0-9_]*)_(?P<rows>[0-9]+)$")


    def __init__(self, *args):

        ma = self._re_pattern.match(self.__class__.__name__)
        value_type = ma.group("value_type")
        rows = int(ma.group("rows"))

        array = _array_map[value_type](rows)
        for i in range(len(args)):
            array[i] = args[i]

        args = [array]


        this = _kcftracker.new__Vec_double_6(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __getattribute__(self, name):
        if name == "__array_interface__":
            ma = self._re_pattern.match(self.__class__.__name__)
            value_type = ma.group("value_type")
            rows = int(ma.group("rows"))
            return {"shape": (rows, 1),
                    "typestr": _cv_numpy_typestr_map[value_type],
                    "data": (int(self.val), False)}
        else:
            return object.__getattribute__(self, name)

    def __getitem__(self, key):
        ma = self._re_pattern.match(self.__class__.__name__)
        rows = int(ma.group("rows"))

        if not isinstance(key, int):
            raise TypeError

        if key >= rows:
            raise IndexError

        return self(key)


    def __str__(self):
        return _kcftracker._Vec_double_6___str__(self)
    __swig_destroy__ = _kcftracker.delete__Vec_double_6
    __del__ = lambda self: None
_Vec_double_6_swigregister = _kcftracker._Vec_double_6_swigregister
_Vec_double_6_swigregister(_Vec_double_6)

def _Vec_double_6_all(alpha):
    return _kcftracker._Vec_double_6_all(alpha)
_Vec_double_6_all = _kcftracker._Vec_double_6_all

class _DataType_Vec_double_6(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _DataType_Vec_double_6, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _DataType_Vec_double_6, name)
    __repr__ = _swig_repr
    generic_type = _kcftracker._DataType_Vec_double_6_generic_type
    channels = _kcftracker._DataType_Vec_double_6_channels
    fmt = _kcftracker._DataType_Vec_double_6_fmt

    def __init__(self):
        this = _kcftracker.new__DataType_Vec_double_6()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete__DataType_Vec_double_6
    __del__ = lambda self: None
_DataType_Vec_double_6_swigregister = _kcftracker._DataType_Vec_double_6_swigregister
_DataType_Vec_double_6_swigregister(_DataType_Vec_double_6)


Vec6d = _Vec_double_6
DataType_Vec6d = _DataType_Vec_double_6

class _mat__np_array_constructor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _mat__np_array_constructor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _mat__np_array_constructor, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _kcftracker.new__mat__np_array_constructor()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete__mat__np_array_constructor
    __del__ = lambda self: None
_mat__np_array_constructor_swigregister = _kcftracker._mat__np_array_constructor_swigregister
_mat__np_array_constructor_swigregister(_mat__np_array_constructor)


def _depthToDtype(depth):
    return _kcftracker._depthToDtype(depth)
_depthToDtype = _kcftracker._depthToDtype

def _toCvType(dtype, nChannel):
    return _kcftracker._toCvType(dtype, nChannel)
_toCvType = _kcftracker._toCvType
class Tracker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tracker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tracker, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _kcftracker.delete_Tracker
    __del__ = lambda self: None

    def init(self, roi, image):
        return _kcftracker.Tracker_init(self, roi, image)

    def update(self, image):
        return _kcftracker.Tracker_update(self, image)
Tracker_swigregister = _kcftracker.Tracker_swigregister
Tracker_swigregister(Tracker)


_kcftracker.MAX_FILELEN_swigconstant(_kcftracker)
MAX_FILELEN = _kcftracker.MAX_FILELEN
class sPerfProfileParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sPerfProfileParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sPerfProfileParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cSrcFile0"] = _kcftracker.sPerfProfileParam_cSrcFile0_set
    __swig_getmethods__["cSrcFile0"] = _kcftracker.sPerfProfileParam_cSrcFile0_get
    if _newclass:
        cSrcFile0 = _swig_property(_kcftracker.sPerfProfileParam_cSrcFile0_get, _kcftracker.sPerfProfileParam_cSrcFile0_set)
    __swig_setmethods__["cSrcFile1"] = _kcftracker.sPerfProfileParam_cSrcFile1_set
    __swig_getmethods__["cSrcFile1"] = _kcftracker.sPerfProfileParam_cSrcFile1_get
    if _newclass:
        cSrcFile1 = _swig_property(_kcftracker.sPerfProfileParam_cSrcFile1_get, _kcftracker.sPerfProfileParam_cSrcFile1_set)
    __swig_setmethods__["cParamFile"] = _kcftracker.sPerfProfileParam_cParamFile_set
    __swig_getmethods__["cParamFile"] = _kcftracker.sPerfProfileParam_cParamFile_get
    if _newclass:
        cParamFile = _swig_property(_kcftracker.sPerfProfileParam_cParamFile_get, _kcftracker.sPerfProfileParam_cParamFile_set)
    __swig_setmethods__["cOutFileH0"] = _kcftracker.sPerfProfileParam_cOutFileH0_set
    __swig_getmethods__["cOutFileH0"] = _kcftracker.sPerfProfileParam_cOutFileH0_get
    if _newclass:
        cOutFileH0 = _swig_property(_kcftracker.sPerfProfileParam_cOutFileH0_get, _kcftracker.sPerfProfileParam_cOutFileH0_set)
    __swig_setmethods__["cOutFileV0"] = _kcftracker.sPerfProfileParam_cOutFileV0_set
    __swig_getmethods__["cOutFileV0"] = _kcftracker.sPerfProfileParam_cOutFileV0_get
    if _newclass:
        cOutFileV0 = _swig_property(_kcftracker.sPerfProfileParam_cOutFileV0_get, _kcftracker.sPerfProfileParam_cOutFileV0_set)
    __swig_setmethods__["cOutFileH1"] = _kcftracker.sPerfProfileParam_cOutFileH1_set
    __swig_getmethods__["cOutFileH1"] = _kcftracker.sPerfProfileParam_cOutFileH1_get
    if _newclass:
        cOutFileH1 = _swig_property(_kcftracker.sPerfProfileParam_cOutFileH1_get, _kcftracker.sPerfProfileParam_cOutFileH1_set)
    __swig_setmethods__["cOutFileV1"] = _kcftracker.sPerfProfileParam_cOutFileV1_set
    __swig_getmethods__["cOutFileV1"] = _kcftracker.sPerfProfileParam_cOutFileV1_get
    if _newclass:
        cOutFileV1 = _swig_property(_kcftracker.sPerfProfileParam_cOutFileV1_get, _kcftracker.sPerfProfileParam_cOutFileV1_set)
    __swig_setmethods__["cOutFileMulSpec"] = _kcftracker.sPerfProfileParam_cOutFileMulSpec_set
    __swig_getmethods__["cOutFileMulSpec"] = _kcftracker.sPerfProfileParam_cOutFileMulSpec_get
    if _newclass:
        cOutFileMulSpec = _swig_property(_kcftracker.sPerfProfileParam_cOutFileMulSpec_get, _kcftracker.sPerfProfileParam_cOutFileMulSpec_set)
    __swig_setmethods__["cOutDFTInvH"] = _kcftracker.sPerfProfileParam_cOutDFTInvH_set
    __swig_getmethods__["cOutDFTInvH"] = _kcftracker.sPerfProfileParam_cOutDFTInvH_get
    if _newclass:
        cOutDFTInvH = _swig_property(_kcftracker.sPerfProfileParam_cOutDFTInvH_get, _kcftracker.sPerfProfileParam_cOutDFTInvH_set)
    __swig_setmethods__["cOutDFTInvV"] = _kcftracker.sPerfProfileParam_cOutDFTInvV_set
    __swig_getmethods__["cOutDFTInvV"] = _kcftracker.sPerfProfileParam_cOutDFTInvV_get
    if _newclass:
        cOutDFTInvV = _swig_property(_kcftracker.sPerfProfileParam_cOutDFTInvV_get, _kcftracker.sPerfProfileParam_cOutDFTInvV_set)
    __swig_setmethods__["cOutImageSum"] = _kcftracker.sPerfProfileParam_cOutImageSum_set
    __swig_getmethods__["cOutImageSum"] = _kcftracker.sPerfProfileParam_cOutImageSum_get
    if _newclass:
        cOutImageSum = _swig_property(_kcftracker.sPerfProfileParam_cOutImageSum_get, _kcftracker.sPerfProfileParam_cOutImageSum_set)
    __swig_setmethods__["cOutSrcImageSum"] = _kcftracker.sPerfProfileParam_cOutSrcImageSum_set
    __swig_getmethods__["cOutSrcImageSum"] = _kcftracker.sPerfProfileParam_cOutSrcImageSum_get
    if _newclass:
        cOutSrcImageSum = _swig_property(_kcftracker.sPerfProfileParam_cOutSrcImageSum_get, _kcftracker.sPerfProfileParam_cOutSrcImageSum_set)
    __swig_setmethods__["cOutFinal"] = _kcftracker.sPerfProfileParam_cOutFinal_set
    __swig_getmethods__["cOutFinal"] = _kcftracker.sPerfProfileParam_cOutFinal_get
    if _newclass:
        cOutFinal = _swig_property(_kcftracker.sPerfProfileParam_cOutFinal_get, _kcftracker.sPerfProfileParam_cOutFinal_set)
    __swig_setmethods__["usInWidth"] = _kcftracker.sPerfProfileParam_usInWidth_set
    __swig_getmethods__["usInWidth"] = _kcftracker.sPerfProfileParam_usInWidth_get
    if _newclass:
        usInWidth = _swig_property(_kcftracker.sPerfProfileParam_usInWidth_get, _kcftracker.sPerfProfileParam_usInWidth_set)
    __swig_setmethods__["usInHeight"] = _kcftracker.sPerfProfileParam_usInHeight_set
    __swig_getmethods__["usInHeight"] = _kcftracker.sPerfProfileParam_usInHeight_get
    if _newclass:
        usInHeight = _swig_property(_kcftracker.sPerfProfileParam_usInHeight_get, _kcftracker.sPerfProfileParam_usInHeight_set)
    __swig_setmethods__["ucInFormat"] = _kcftracker.sPerfProfileParam_ucInFormat_set
    __swig_getmethods__["ucInFormat"] = _kcftracker.sPerfProfileParam_ucInFormat_get
    if _newclass:
        ucInFormat = _swig_property(_kcftracker.sPerfProfileParam_ucInFormat_get, _kcftracker.sPerfProfileParam_ucInFormat_set)
    __swig_setmethods__["usOutWidth"] = _kcftracker.sPerfProfileParam_usOutWidth_set
    __swig_getmethods__["usOutWidth"] = _kcftracker.sPerfProfileParam_usOutWidth_get
    if _newclass:
        usOutWidth = _swig_property(_kcftracker.sPerfProfileParam_usOutWidth_get, _kcftracker.sPerfProfileParam_usOutWidth_set)
    __swig_setmethods__["usOutHeight"] = _kcftracker.sPerfProfileParam_usOutHeight_set
    __swig_getmethods__["usOutHeight"] = _kcftracker.sPerfProfileParam_usOutHeight_get
    if _newclass:
        usOutHeight = _swig_property(_kcftracker.sPerfProfileParam_usOutHeight_get, _kcftracker.sPerfProfileParam_usOutHeight_set)
    __swig_setmethods__["usOutFormat"] = _kcftracker.sPerfProfileParam_usOutFormat_set
    __swig_getmethods__["usOutFormat"] = _kcftracker.sPerfProfileParam_usOutFormat_get
    if _newclass:
        usOutFormat = _swig_property(_kcftracker.sPerfProfileParam_usOutFormat_get, _kcftracker.sPerfProfileParam_usOutFormat_set)
    __swig_setmethods__["usSliceNum"] = _kcftracker.sPerfProfileParam_usSliceNum_set
    __swig_getmethods__["usSliceNum"] = _kcftracker.sPerfProfileParam_usSliceNum_get
    if _newclass:
        usSliceNum = _swig_property(_kcftracker.sPerfProfileParam_usSliceNum_get, _kcftracker.sPerfProfileParam_usSliceNum_set)
    __swig_setmethods__["usSubSliceNum"] = _kcftracker.sPerfProfileParam_usSubSliceNum_set
    __swig_getmethods__["usSubSliceNum"] = _kcftracker.sPerfProfileParam_usSubSliceNum_get
    if _newclass:
        usSubSliceNum = _swig_property(_kcftracker.sPerfProfileParam_usSubSliceNum_get, _kcftracker.sPerfProfileParam_usSubSliceNum_set)
    __swig_setmethods__["usEUNum"] = _kcftracker.sPerfProfileParam_usEUNum_set
    __swig_getmethods__["usEUNum"] = _kcftracker.sPerfProfileParam_usEUNum_get
    if _newclass:
        usEUNum = _swig_property(_kcftracker.sPerfProfileParam_usEUNum_get, _kcftracker.sPerfProfileParam_usEUNum_set)
    __swig_setmethods__["bPrimitive"] = _kcftracker.sPerfProfileParam_bPrimitive_set
    __swig_getmethods__["bPrimitive"] = _kcftracker.sPerfProfileParam_bPrimitive_get
    if _newclass:
        bPrimitive = _swig_property(_kcftracker.sPerfProfileParam_bPrimitive_get, _kcftracker.sPerfProfileParam_bPrimitive_set)
    __swig_setmethods__["usLoops"] = _kcftracker.sPerfProfileParam_usLoops_set
    __swig_getmethods__["usLoops"] = _kcftracker.sPerfProfileParam_usLoops_get
    if _newclass:
        usLoops = _swig_property(_kcftracker.sPerfProfileParam_usLoops_get, _kcftracker.sPerfProfileParam_usLoops_set)
    __swig_setmethods__["usWalkerPattern"] = _kcftracker.sPerfProfileParam_usWalkerPattern_set
    __swig_getmethods__["usWalkerPattern"] = _kcftracker.sPerfProfileParam_usWalkerPattern_get
    if _newclass:
        usWalkerPattern = _swig_property(_kcftracker.sPerfProfileParam_usWalkerPattern_get, _kcftracker.sPerfProfileParam_usWalkerPattern_set)
    __swig_setmethods__["usPitchX"] = _kcftracker.sPerfProfileParam_usPitchX_set
    __swig_getmethods__["usPitchX"] = _kcftracker.sPerfProfileParam_usPitchX_get
    if _newclass:
        usPitchX = _swig_property(_kcftracker.sPerfProfileParam_usPitchX_get, _kcftracker.sPerfProfileParam_usPitchX_set)
    __swig_setmethods__["usPitchY"] = _kcftracker.sPerfProfileParam_usPitchY_set
    __swig_getmethods__["usPitchY"] = _kcftracker.sPerfProfileParam_usPitchY_get
    if _newclass:
        usPitchY = _swig_property(_kcftracker.sPerfProfileParam_usPitchY_get, _kcftracker.sPerfProfileParam_usPitchY_set)
    __swig_setmethods__["usPitchZ"] = _kcftracker.sPerfProfileParam_usPitchZ_set
    __swig_getmethods__["usPitchZ"] = _kcftracker.sPerfProfileParam_usPitchZ_get
    if _newclass:
        usPitchZ = _swig_property(_kcftracker.sPerfProfileParam_usPitchZ_get, _kcftracker.sPerfProfileParam_usPitchZ_set)
    __swig_setmethods__["fScale"] = _kcftracker.sPerfProfileParam_fScale_set
    __swig_getmethods__["fScale"] = _kcftracker.sPerfProfileParam_fScale_get
    if _newclass:
        fScale = _swig_property(_kcftracker.sPerfProfileParam_fScale_get, _kcftracker.sPerfProfileParam_fScale_set)
    __swig_setmethods__["ucChannel"] = _kcftracker.sPerfProfileParam_ucChannel_set
    __swig_getmethods__["ucChannel"] = _kcftracker.sPerfProfileParam_ucChannel_get
    if _newclass:
        ucChannel = _swig_property(_kcftracker.sPerfProfileParam_ucChannel_get, _kcftracker.sPerfProfileParam_ucChannel_set)
    __swig_setmethods__["bInv"] = _kcftracker.sPerfProfileParam_bInv_set
    __swig_getmethods__["bInv"] = _kcftracker.sPerfProfileParam_bInv_get
    if _newclass:
        bInv = _swig_property(_kcftracker.sPerfProfileParam_bInv_get, _kcftracker.sPerfProfileParam_bInv_set)

    def __init__(self):
        this = _kcftracker.new_sPerfProfileParam()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete_sPerfProfileParam
    __del__ = lambda self: None
sPerfProfileParam_swigregister = _kcftracker.sPerfProfileParam_swigregister
sPerfProfileParam_swigregister(sPerfProfileParam)

class InputParamMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputParamMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputParamMap, name)
    __repr__ = _swig_repr
    __swig_setmethods__["token"] = _kcftracker.InputParamMap_token_set
    __swig_getmethods__["token"] = _kcftracker.InputParamMap_token_get
    if _newclass:
        token = _swig_property(_kcftracker.InputParamMap_token_get, _kcftracker.InputParamMap_token_set)
    __swig_setmethods__["place"] = _kcftracker.InputParamMap_place_set
    __swig_getmethods__["place"] = _kcftracker.InputParamMap_place_get
    if _newclass:
        place = _swig_property(_kcftracker.InputParamMap_place_get, _kcftracker.InputParamMap_place_set)
    __swig_setmethods__["type"] = _kcftracker.InputParamMap_type_set
    __swig_getmethods__["type"] = _kcftracker.InputParamMap_type_get
    if _newclass:
        type = _swig_property(_kcftracker.InputParamMap_type_get, _kcftracker.InputParamMap_type_set)
    __swig_setmethods__["size"] = _kcftracker.InputParamMap_size_set
    __swig_getmethods__["size"] = _kcftracker.InputParamMap_size_get
    if _newclass:
        size = _swig_property(_kcftracker.InputParamMap_size_get, _kcftracker.InputParamMap_size_set)

    def __init__(self):
        this = _kcftracker.new_InputParamMap()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete_InputParamMap
    __del__ = lambda self: None
InputParamMap_swigregister = _kcftracker.InputParamMap_swigregister
InputParamMap_swigregister(InputParamMap)

class KCFTracker(Tracker):
    __swig_setmethods__ = {}
    for _s in [Tracker]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KCFTracker, name, value)
    __swig_getmethods__ = {}
    for _s in [Tracker]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KCFTracker, name)
    __repr__ = _swig_repr

    def __init__(self, hog=True, fixed_window=True, multiscale=True, lab=True):
        this = _kcftracker.new_KCFTracker(hog, fixed_window, multiscale, lab)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _kcftracker.delete_KCFTracker
    __del__ = lambda self: None

    def init(self, roi, orig_image):
        return _kcftracker.KCFTracker_init(self, roi, orig_image)

    def update(self, orig_image):
        return _kcftracker.KCFTracker_update(self, orig_image)
    __swig_setmethods__["interp_factor"] = _kcftracker.KCFTracker_interp_factor_set
    __swig_getmethods__["interp_factor"] = _kcftracker.KCFTracker_interp_factor_get
    if _newclass:
        interp_factor = _swig_property(_kcftracker.KCFTracker_interp_factor_get, _kcftracker.KCFTracker_interp_factor_set)
    __swig_setmethods__["sigma"] = _kcftracker.KCFTracker_sigma_set
    __swig_getmethods__["sigma"] = _kcftracker.KCFTracker_sigma_get
    if _newclass:
        sigma = _swig_property(_kcftracker.KCFTracker_sigma_get, _kcftracker.KCFTracker_sigma_set)
    __swig_setmethods__["_lambda"] = _kcftracker.KCFTracker__lambda_set
    __swig_getmethods__["_lambda"] = _kcftracker.KCFTracker__lambda_get
    if _newclass:
        _lambda = _swig_property(_kcftracker.KCFTracker__lambda_get, _kcftracker.KCFTracker__lambda_set)
    __swig_setmethods__["cell_size"] = _kcftracker.KCFTracker_cell_size_set
    __swig_getmethods__["cell_size"] = _kcftracker.KCFTracker_cell_size_get
    if _newclass:
        cell_size = _swig_property(_kcftracker.KCFTracker_cell_size_get, _kcftracker.KCFTracker_cell_size_set)
    __swig_setmethods__["cell_sizeQ"] = _kcftracker.KCFTracker_cell_sizeQ_set
    __swig_getmethods__["cell_sizeQ"] = _kcftracker.KCFTracker_cell_sizeQ_get
    if _newclass:
        cell_sizeQ = _swig_property(_kcftracker.KCFTracker_cell_sizeQ_get, _kcftracker.KCFTracker_cell_sizeQ_set)
    __swig_setmethods__["padding"] = _kcftracker.KCFTracker_padding_set
    __swig_getmethods__["padding"] = _kcftracker.KCFTracker_padding_get
    if _newclass:
        padding = _swig_property(_kcftracker.KCFTracker_padding_get, _kcftracker.KCFTracker_padding_set)
    __swig_setmethods__["output_sigma_factor"] = _kcftracker.KCFTracker_output_sigma_factor_set
    __swig_getmethods__["output_sigma_factor"] = _kcftracker.KCFTracker_output_sigma_factor_get
    if _newclass:
        output_sigma_factor = _swig_property(_kcftracker.KCFTracker_output_sigma_factor_get, _kcftracker.KCFTracker_output_sigma_factor_set)
    __swig_setmethods__["template_size"] = _kcftracker.KCFTracker_template_size_set
    __swig_getmethods__["template_size"] = _kcftracker.KCFTracker_template_size_get
    if _newclass:
        template_size = _swig_property(_kcftracker.KCFTracker_template_size_get, _kcftracker.KCFTracker_template_size_set)
    __swig_setmethods__["pCmDev"] = _kcftracker.KCFTracker_pCmDev_set
    __swig_getmethods__["pCmDev"] = _kcftracker.KCFTracker_pCmDev_get
    if _newclass:
        pCmDev = _swig_property(_kcftracker.KCFTracker_pCmDev_get, _kcftracker.KCFTracker_pCmDev_set)
KCFTracker_swigregister = _kcftracker.KCFTracker_swigregister
KCFTracker_swigregister(KCFTracker)
cvar = _kcftracker.cvar

# This file is compatible with both classic and new-style classes.


